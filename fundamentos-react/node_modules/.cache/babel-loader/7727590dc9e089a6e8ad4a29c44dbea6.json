{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\comunicacao\\\\DiretaPai.jsx\";\n\n/* eslint-disable import/no-anonymous-default-export */\n//IMPORT REACT\nimport React from 'react'; // Importando componente filho para pai\n\nimport DiretaFilho from './DiretaFilho';\n/**\r\n * AULA 33 - COMUNICAÇÃO DIRETA\r\n * \r\n * A nossa aplicação é uma arvore de componentes, temos o componente [app] que ira representar o conteudo da aplicação dentro desse componente de conteudo vamos ter um titulo, alem do titulo podemos ter uma tabela, e ddentro dessa tabela uma thead.\r\n * \r\n * Voce pode quebrar sua aplicação em multiplos componentes sempre visando o re-uso e a organização;\r\n * \r\n * Se temos um componente que precisa ser re-usado, voce coloca ele num trecho e re-usa ele.\r\n * \r\n * Se voce tem um componente que nao precisa ser re-usadoi mas ele eh muito grande, podemos quebrar ele em partes para manter assim a organização.\r\n * \r\n * Dentro dessa arvore de componentes é muito comum termo a COMUNICAÇÃO DIRETA e a COMUNICAÇÃO INDIRETA.\r\n * \r\n * // FORMA 1 -> COMUNICAÇÃO DIRETA\r\n * \r\n * Vamos mostrar que a comunicação direta é feita atraves das props...\r\n * \r\n * Vamos criar um novo componente para isso.. /comunicacao/DiretaPai.jsx\r\n *                                           /comunicacao/DiretaFilho.jsx\r\n * 1) Dentro do filho vamos supor que queremos receber algumas informações...\r\n *      - Vamos ter uma PROPRIEDADE TEXTUAL\r\n *      - Vamos ter uma PROPRIEDADE NUMERICA\r\n *      - Vamos ter uma PROPRIEDADE BOOLEANA.\r\n * 2) A comunicação de um componente pai para um filho é feita passando via [props]/ propriedades o que quremos passar do pai pro filho..\r\n * 3) À uma relação direta pois dentro do pai temos uma referencia para o componente filho.\r\n *      - DiretaPai.jsx > import DiretaFilho from './'\r\n * 4) Agora temos de forma literal uma definição de um componente <DiretaFilho> de tal forma que conseguimos agora passar um texto, um numero, e um valor booleano.\r\n * 5) O valor booleano no filho pode ser transformado em texto, [VERDADEIRO|FALSO]\r\n * 6) Dessa forma podemos ir agora no App.jsx e criar um novo card para a comunicação direta.\r\n * \r\n * FORMA 2\r\n * 1) Em vez de termos um <div> vamos trocar por <span>\r\n * 2) Podemos no [DiretaPai.jsx] definir novos filhos...\r\n * \r\n * FORMA 3 - COLOCANDO NOMES MAIS SIGNIFICATIVOS [DiretaPai.jsx e DiretaFilho.jsx]\r\n * \r\n * \r\n * Quando falamos comunicação estamos dizendo, nos referindo a  troca de informações, ou seja, estamos passando informações do componente pai para o filho via propriedades [props.]\r\n * \r\n * Vimos a comunicação direta quandoc riamos o componente <Familia> onde passavamos as prorpeidades de sobrenome e no <FamiliaMembro> passamos o nome dos familiares.\r\n *      Nesse caso usamos a função map para passar as propriedades de <familia> para <FamiliaMembro>\r\n *      {\r\n                props.children.map((child, i) =>{\r\n                    return cloneElement( child, {...props, key: i})\r\n                })\r\n            }\r\n * \r\n * \r\n * \r\n * \r\n */\n// FORMA 3 -NOMES MAIS SIGNIFICATIVOS...\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DiretaFilho, {\n      nome: \"Angelina\",\n      idade: 26,\n      nerd: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DiretaFilho, {\n      nome: \"Santa\",\n      idade: 20,\n      nerd: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}); // FORMA 2\n// export default props => {\n//     return (\n//         <div>\n//             <DiretaFilho \n//                 texto='Filho 1' \n//                 numero={20} \n//                 bool={true} />\n//                 <DiretaFilho \n//                 texto='Filho 2' \n//                 numero={25} \n//                 bool={false} />\n//         </div>\n//     )\n// }\n// FORMA 1\n// export default props => {\n//     return (\n//         <div>\n//             <DiretaFilho \n//                 texto='Filho 1' \n//                 numero={20} \n//                 bool={true} />\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/comunicacao/DiretaPai.jsx"],"names":["React","DiretaFilho","props"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAeC,KAAK,IAAI;AACpB,sBACI;AAAA,4BACI,QAAC,WAAD;AACI,MAAA,IAAI,EAAC,UADT;AAEI,MAAA,KAAK,EAAE,EAFX;AAGI,MAAA,IAAI,EAAE;AAHV;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI,QAAC,WAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,KAAK,EAAE,EAFX;AAGI,MAAA,IAAI,EAAE;AAHV;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAfD,E,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n//IMPORT REACT\r\nimport React from 'react'\r\n\r\n// Importando componente filho para pai\r\nimport DiretaFilho from './DiretaFilho'\r\n\r\n/**\r\n * AULA 33 - COMUNICAÇÃO DIRETA\r\n * \r\n * A nossa aplicação é uma arvore de componentes, temos o componente [app] que ira representar o conteudo da aplicação dentro desse componente de conteudo vamos ter um titulo, alem do titulo podemos ter uma tabela, e ddentro dessa tabela uma thead.\r\n * \r\n * Voce pode quebrar sua aplicação em multiplos componentes sempre visando o re-uso e a organização;\r\n * \r\n * Se temos um componente que precisa ser re-usado, voce coloca ele num trecho e re-usa ele.\r\n * \r\n * Se voce tem um componente que nao precisa ser re-usadoi mas ele eh muito grande, podemos quebrar ele em partes para manter assim a organização.\r\n * \r\n * Dentro dessa arvore de componentes é muito comum termo a COMUNICAÇÃO DIRETA e a COMUNICAÇÃO INDIRETA.\r\n * \r\n * // FORMA 1 -> COMUNICAÇÃO DIRETA\r\n * \r\n * Vamos mostrar que a comunicação direta é feita atraves das props...\r\n * \r\n * Vamos criar um novo componente para isso.. /comunicacao/DiretaPai.jsx\r\n *                                           /comunicacao/DiretaFilho.jsx\r\n * 1) Dentro do filho vamos supor que queremos receber algumas informações...\r\n *      - Vamos ter uma PROPRIEDADE TEXTUAL\r\n *      - Vamos ter uma PROPRIEDADE NUMERICA\r\n *      - Vamos ter uma PROPRIEDADE BOOLEANA.\r\n * 2) A comunicação de um componente pai para um filho é feita passando via [props]/ propriedades o que quremos passar do pai pro filho..\r\n * 3) À uma relação direta pois dentro do pai temos uma referencia para o componente filho.\r\n *      - DiretaPai.jsx > import DiretaFilho from './'\r\n * 4) Agora temos de forma literal uma definição de um componente <DiretaFilho> de tal forma que conseguimos agora passar um texto, um numero, e um valor booleano.\r\n * 5) O valor booleano no filho pode ser transformado em texto, [VERDADEIRO|FALSO]\r\n * 6) Dessa forma podemos ir agora no App.jsx e criar um novo card para a comunicação direta.\r\n * \r\n * FORMA 2\r\n * 1) Em vez de termos um <div> vamos trocar por <span>\r\n * 2) Podemos no [DiretaPai.jsx] definir novos filhos...\r\n * \r\n * FORMA 3 - COLOCANDO NOMES MAIS SIGNIFICATIVOS [DiretaPai.jsx e DiretaFilho.jsx]\r\n * \r\n * \r\n * Quando falamos comunicação estamos dizendo, nos referindo a  troca de informações, ou seja, estamos passando informações do componente pai para o filho via propriedades [props.]\r\n * \r\n * Vimos a comunicação direta quandoc riamos o componente <Familia> onde passavamos as prorpeidades de sobrenome e no <FamiliaMembro> passamos o nome dos familiares.\r\n *      Nesse caso usamos a função map para passar as propriedades de <familia> para <FamiliaMembro>\r\n *      {\r\n                props.children.map((child, i) =>{\r\n                    return cloneElement( child, {...props, key: i})\r\n                })\r\n            }\r\n * \r\n * \r\n * \r\n * \r\n */\r\n// FORMA 3 -NOMES MAIS SIGNIFICATIVOS...\r\nexport default props => {\r\n    return (\r\n        <div>\r\n            <DiretaFilho\r\n                nome=\"Angelina\"\r\n                idade={26}\r\n                nerd={true}\r\n            />\r\n            <DiretaFilho\r\n                nome=\"Santa\"\r\n                idade={20}\r\n                nerd={false}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n// FORMA 2\r\n// export default props => {\r\n//     return (\r\n//         <div>\r\n//             <DiretaFilho \r\n//                 texto='Filho 1' \r\n//                 numero={20} \r\n//                 bool={true} />\r\n//                 <DiretaFilho \r\n//                 texto='Filho 2' \r\n//                 numero={25} \r\n//                 bool={false} />\r\n//         </div>\r\n//     )\r\n// }\r\n// FORMA 1\r\n// export default props => {\r\n//     return (\r\n//         <div>\r\n//             <DiretaFilho \r\n//                 texto='Filho 1' \r\n//                 numero={20} \r\n//                 bool={true} />\r\n//         </div>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}