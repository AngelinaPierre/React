{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\formulario\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable import/no-anonymous-default-export */\n// IMPORT REACT\nimport React, { useState } from 'react'; // IMPORT ESTILO\n\nimport './Input.css';\n/**\r\n * AULA 36 - COMPONENTE CONTROLADO\r\n * \r\n * Vamos criar mais um exercicio para vermos um exemplo de input e vermos o conceito de COMPONENTE CONTROLADO.\r\n *      /FORMULARIO/input.jsx\r\n * \r\n * Ir no site https://pt-br.reactjs.org/docs/forms.html -> para ver a documentação sobre COMPONENTES CONTROLADOS.\r\n * Vamos ver que esses componentes possuem ligação com <input>|<textarea> |<select>\r\n * \r\n * FORMA 1\r\n * \r\n * 1) Criamos o componente <Input>\r\n * 2) Vamos importar ele agora dentro de App.jsx e criar um <card>.\r\n * 3) Vamos criar um estado [nome, função_mudança] -> ini = [inicial]\r\n * 4) No <input> vamos colocar um atributo chamado [value] que irá receber uma expressão {}, a que criamos acima...\r\n *          <input value={valor} />\r\n *          - Isso nos mostra a renderização do nosso componente com o valor inicial = 'Inicial'\r\n * 5) Vamos criar um Input.css para fazer algumas alterações no estilo e ver melhor os resultados.\r\n *          <div className = \"Input\">\r\n * \r\n * FORMA 2\r\n * \r\n * No momento atual, esperamos que se colocarmos o cursos em cima da caixa de <input> e digitarmos algo, ele mude para o que digitarmos, o que não irá acontecer.\r\n * \r\n * Porque? Ele é um COMPONENTE CONTROLADO, e o que ele chama de VERDADE ABSOLUTA são os DADOS.\r\n * \r\n * Seu DADO, ou seja, o ESTADO DO COMPONENTE, não mudou, não chamados nenhuma função de alteração [setvalor] para alterar o estado inicial 'type' para o que foi digitado no teclado.\r\n * \r\n * Ou seja, não conseguimos mudar o ESTADO de um componente diretamente a partir da INTERFACE, temos que mudar o ESTADO do componente para quando o ESTADO mudar, a mudança ser refletida na interface grafica.\r\n * \r\n * O 'caminho' é UNIDIRECIONAL o ESTADO muda, altera a INTERFACE GRAFICA, e não a INTERFACE muda e altera o ESTADO.\r\n * \r\n * Isso acontece indiretamente a partir dos EVENTOS\r\n * \r\n * 1) Conseguimos mudar o estado desse input pegando, por exemplo, o evento [onChange - será chamado sempre que digitarmos], e atribuir a esse evento[onChange] uma função que receberá como parametro outro EVENTO.\r\n * 2) Na forma atual, toda vez que clicarmos no [type..] será mostrado um evento no CONSOLE.\r\n * \r\n * FORMA 3\r\n * \r\n * 1) Se quisermos acessar mais especificamente usamos o [target.value] no evento, será mostrado no CONSOLE o valor novo que foi gerado...\r\n * 2) Ele não esta evoluindo o estado, esta mostrando o texto inical + a tecla unitaria que estamos apertando no teclado.\r\n * \r\n * FORAM 4 - ALTERANDO O ESTADO\r\n * \r\n * 1)Para mudar o estado, chamamos a função de mudança [setValor] e atribuimos a ela o que passamos na FORMA 3 com o console.log.\r\n * 2)Agora sim o conteudo do <input> é alterado pois estamos tbm alterando o estado ao atribuir o [setValor(evento.target.value)]\r\n * \r\n * FORMA 5 - exibindo na tela \r\n * \r\n * \r\n * \r\n */\n// FORMA 5\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(props => {\n  _s();\n\n  const [valor, setValor] = useState(\"Type..\");\n\n  function quandoMudar(evento) {\n    // mudando o estado do componente\n    setValor(evento.target.valor); // observando mudanças no console\n    // console.log(evento.target.valor)\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Input\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: valor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: valor,\n      onChange: quandoMudar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}, \"38BBaq+kNMhwlJWk3G7SftWnNtU=\"); // FORMA 4\n// export default props => {\n//     // criando estado\n//     const [valor,setValor] = useState('Type...')\n//     // criando função para mostrar o valor no console sem alterar o estado\n//     function quandoMudar(evento) {\n//         setValor(evento.target.value)\n//         // mostrando entrada do teclado sem alterar o estado inicial.\n//         console.log(evento.target.value)\n//     }\n//     return(\n//         <div className='Input'>\n//             <input value={valor} onChange={quandoMudar} />\n//         </div>\n//     )\n// }\n// FORMA 3\n// export default props => {\n//     // criando estado\n//     const [valor, setValor] = useState('Type...')\n//     // criando função para mostrar o valor no console sem alterar o estado\n//     function quandoMudar(evento) {\n//         console.log(evento.target.value)\n//     }\n//     return (\n//         <div className='Input'>\n//             <input value={valor} onChange={quandoMudar} />\n//         </div>\n//     )\n// }\n//FORMA 2\n// export default props => {\n//     const [valor, setValor] = useState('Type...')\n//     function quandoMudar(evento) {\n//         console.log(evento)\n//     }\n//     return (\n//         <div className='Input'>\n//             <input value={valor} onChange={quandoMudar} />\n//         </div>\n//     )\n// }\n// FORMA 1\n// export default props => {\n//     const [valor, setValor] = useState('Type')\n//     return (\n//         <div className=\"Input\">\n//             <input value={valor} />\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/formulario/Input.jsx"],"names":["React","useState","props","valor","setValor","quandoMudar","evento","target"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,kBAAeC,KAAK,IAAI;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,QAAD,CAAlC;;AACA,WAASI,WAAT,CAAqBC,MAArB,EAA6B;AACzB;AACAF,IAAAA,QAAQ,CAACE,MAAM,CAACC,MAAP,CAAcJ,KAAf,CAAR,CAFyB,CAGzB;AACA;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACI;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,KAAK,EAAGA,KAAf;AAAuB,MAAA,QAAQ,EAAGE;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAdD,kC,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n// IMPORT REACT\r\nimport React, { useState } from 'react'\r\n\r\n// IMPORT ESTILO\r\nimport './Input.css'\r\n\r\n/**\r\n * AULA 36 - COMPONENTE CONTROLADO\r\n * \r\n * Vamos criar mais um exercicio para vermos um exemplo de input e vermos o conceito de COMPONENTE CONTROLADO.\r\n *      /FORMULARIO/input.jsx\r\n * \r\n * Ir no site https://pt-br.reactjs.org/docs/forms.html -> para ver a documentação sobre COMPONENTES CONTROLADOS.\r\n * Vamos ver que esses componentes possuem ligação com <input>|<textarea> |<select>\r\n * \r\n * FORMA 1\r\n * \r\n * 1) Criamos o componente <Input>\r\n * 2) Vamos importar ele agora dentro de App.jsx e criar um <card>.\r\n * 3) Vamos criar um estado [nome, função_mudança] -> ini = [inicial]\r\n * 4) No <input> vamos colocar um atributo chamado [value] que irá receber uma expressão {}, a que criamos acima...\r\n *          <input value={valor} />\r\n *          - Isso nos mostra a renderização do nosso componente com o valor inicial = 'Inicial'\r\n * 5) Vamos criar um Input.css para fazer algumas alterações no estilo e ver melhor os resultados.\r\n *          <div className = \"Input\">\r\n * \r\n * FORMA 2\r\n * \r\n * No momento atual, esperamos que se colocarmos o cursos em cima da caixa de <input> e digitarmos algo, ele mude para o que digitarmos, o que não irá acontecer.\r\n * \r\n * Porque? Ele é um COMPONENTE CONTROLADO, e o que ele chama de VERDADE ABSOLUTA são os DADOS.\r\n * \r\n * Seu DADO, ou seja, o ESTADO DO COMPONENTE, não mudou, não chamados nenhuma função de alteração [setvalor] para alterar o estado inicial 'type' para o que foi digitado no teclado.\r\n * \r\n * Ou seja, não conseguimos mudar o ESTADO de um componente diretamente a partir da INTERFACE, temos que mudar o ESTADO do componente para quando o ESTADO mudar, a mudança ser refletida na interface grafica.\r\n * \r\n * O 'caminho' é UNIDIRECIONAL o ESTADO muda, altera a INTERFACE GRAFICA, e não a INTERFACE muda e altera o ESTADO.\r\n * \r\n * Isso acontece indiretamente a partir dos EVENTOS\r\n * \r\n * 1) Conseguimos mudar o estado desse input pegando, por exemplo, o evento [onChange - será chamado sempre que digitarmos], e atribuir a esse evento[onChange] uma função que receberá como parametro outro EVENTO.\r\n * 2) Na forma atual, toda vez que clicarmos no [type..] será mostrado um evento no CONSOLE.\r\n * \r\n * FORMA 3\r\n * \r\n * 1) Se quisermos acessar mais especificamente usamos o [target.value] no evento, será mostrado no CONSOLE o valor novo que foi gerado...\r\n * 2) Ele não esta evoluindo o estado, esta mostrando o texto inical + a tecla unitaria que estamos apertando no teclado.\r\n * \r\n * FORAM 4 - ALTERANDO O ESTADO\r\n * \r\n * 1)Para mudar o estado, chamamos a função de mudança [setValor] e atribuimos a ela o que passamos na FORMA 3 com o console.log.\r\n * 2)Agora sim o conteudo do <input> é alterado pois estamos tbm alterando o estado ao atribuir o [setValor(evento.target.value)]\r\n * \r\n * FORMA 5 - exibindo na tela \r\n * \r\n * \r\n * \r\n */\r\n// FORMA 5\r\nexport default props => {\r\n    const [valor, setValor] = useState(\"Type..\")\r\n    function quandoMudar(evento) {\r\n        // mudando o estado do componente\r\n        setValor(evento.target.valor)\r\n        // observando mudanças no console\r\n        // console.log(evento.target.valor)\r\n    }\r\n    return (\r\n        <div className=\"Input\">\r\n            <h2>{valor}</h2>\r\n            <input value={ valor } onChange={ quandoMudar } />\r\n        </div>\r\n    )\r\n}\r\n// FORMA 4\r\n// export default props => {\r\n//     // criando estado\r\n//     const [valor,setValor] = useState('Type...')\r\n//     // criando função para mostrar o valor no console sem alterar o estado\r\n//     function quandoMudar(evento) {\r\n//         setValor(evento.target.value)\r\n//         // mostrando entrada do teclado sem alterar o estado inicial.\r\n//         console.log(evento.target.value)\r\n//     }\r\n//     return(\r\n//         <div className='Input'>\r\n//             <input value={valor} onChange={quandoMudar} />\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n\r\n// FORMA 3\r\n// export default props => {\r\n//     // criando estado\r\n//     const [valor, setValor] = useState('Type...')\r\n//     // criando função para mostrar o valor no console sem alterar o estado\r\n//     function quandoMudar(evento) {\r\n//         console.log(evento.target.value)\r\n//     }\r\n//     return (\r\n//         <div className='Input'>\r\n//             <input value={valor} onChange={quandoMudar} />\r\n//         </div>\r\n//     )\r\n// }\r\n//FORMA 2\r\n// export default props => {\r\n//     const [valor, setValor] = useState('Type...')\r\n//     function quandoMudar(evento) {\r\n//         console.log(evento)\r\n//     }\r\n//     return (\r\n//         <div className='Input'>\r\n//             <input value={valor} onChange={quandoMudar} />\r\n//         </div>\r\n//     )\r\n// }\r\n// FORMA 1\r\n// export default props => {\r\n//     const [valor, setValor] = useState('Type')\r\n//     return (\r\n//         <div className=\"Input\">\r\n//             <input value={valor} />\r\n//         </div>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}