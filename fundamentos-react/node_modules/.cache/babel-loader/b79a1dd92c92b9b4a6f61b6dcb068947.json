{"ast":null,"code":"/* eslint-disable import/no-anonymous-default-export */\n//IMPORT REACT\n// import React from 'react'\n\n/**\r\n * AULA 32 - RENDERIZAÇÃO CONDICIONAL #03\r\n * \r\n * Vamos fazer a renderização com [if|else]\r\n * \r\n * Para funcionar precisaremos fazer algumas alterações:\r\n *  1) if.js > vamos exportar uma constante [else] com um componente funcional que ira retornar um props.children, ira passar propriedades que foram passadas para o componente...\r\n *  2) Como fazemos para importar um compoente que so possui um export....\r\n *      - Estavamos fazendo o export default\r\n *      - No import do If, iremos colocar tbm o import do componente...\r\n                import If, {Else} from './If'\r\n *  3) PERCEBA QUE ESTA APARECENDO AS DUAS CONDIÇÕES, TEREMOS QUE MECHER NO NOSSO IF PARA CONFIGURAR NESSE SENTIDO.\r\n * \r\n * FORMA 1\r\n * \r\n * Nosso componente <IF> possui um componente filho <Else>, para termos acesso a esse componente criamos uma variavel [elseChild] que fara uma filtragem dos filhos desse componente....\r\n    const elseChild = props.children.filter(child)\r\n *      Child => será uma função onde colocaremos a condição.\r\n        se child.type.name for igual a 'Else' teremos o componente [elseChild] que ira retornar um array, mas queremos pegar somente o primeiro [Else] -> para isso  [0]\r\n        const elseChild = props.children.filter(child => {\r\n        return child.type && child.type.name === 'Else'\r\n        })[0]\r\n        \r\n        Caso o primeiro elemento do array nao exista irá retornar um undefined.\r\n * \r\n * 1) vimos no console que o elemento[Else] existe como um objeto, caso não encontre o elemento será tratado como undefined.\r\n * \r\n * // FORMA 2\r\n * \r\n * Não queremos mostrar o Else caso não seja condição dele, para isso temos que criar um if para comprar com o primeiro valor da constante para elseChild que criamos\r\n * \r\n *  1) Agora nesse caso em vez de retornar o props.children vamos retornar o ifCHildren apenas...\r\n * \r\n */\n//FORMA 2\nexport default (props => {\n  const elseChild = props.children.filter(child => {\n    return child.type && child.type.name === 'Else';\n  })[0];\n  const ifChildren = props.children.filter(child => {\n    return child !== elseChild;\n  });\n\n  if (props.test) {\n    return ifChildren;\n  } else {\n    return false;\n  }\n});\nexport const Else = props => props.children; //FORMA 1\n// export default props => {\n//     const elseChild = props.children.filter(child => {\n//         return child.type && child.type.name === 'Else'\n//     })[0]\n//     console.log(elseChild)\n//     if (props.test) {\n//         return props.children\n//     } else {\n//         return false\n//     }\n// }\n// export const Else = props => props.children\n\n/***\r\n * AULA 31 - RENDERIZAÇÃO CONDICIONAL #02\r\n *\r\n * Vamos fazer um COMPONENTE para nos ajudar na renderização condicional\r\n *\r\n * Aula passada fizemos uma renderização condicional usando um OPERADOR TERNARIO. Agora iremos criar um componente e a partir dele conseguirmos renderizar um trecho .jsx ou não.\r\n *\r\n * Vamos criar um arquivo em /condicional>If.js ou js tanto faz\r\n *\r\n * FORMA 1\r\n *\r\n * Inicialmente vamos criar um componente funcional simples.\r\n *\r\n * A ideia é criar um componente com uma propriedade chamada teste, e nessa proprriedade teramos uma expressão que pode ser verdadeira ou falsa.\r\n * [Verdadeira] -> Conteudo de <span> será exibido.\r\n * [Falsa] -> Nada será renderizado\r\n *      <If test={expressão}> ============componente\r\n *          <span>...</span>  ============filhos do componente\r\n *          <span>...</span>\r\n *          <span>...</span>\r\n *      </If>\r\n *      <If test={aluno.nota >= 7}> ============componente\r\n *          <span>...</span>  ============filhos do componente\r\n *          <span>...</span>\r\n *          <span>...</span>\r\n *      </If>\r\n *\r\n * [props.children] -> Selecionar os elementos que foram passados no corpo de um componente.\r\n *  Retorno do if(props.test)\r\n *      <span>...</span>\r\n *      <span>...</span>\r\n *      <span>...</span>\r\n *\r\n * Vamos criar outro componente chamado UsuarioInfo.js para testar nosso compoennte if...\r\n *\r\n */\n//FORMA 1\n// export default props => {\n//     if(props.test){\n//         return props.children\n//     }else{\n//         return false\n//     }\n// }\n// export const Else = props => props.children\n\n_c = Else;\n\nvar _c;\n\n$RefreshReg$(_c, \"Else\");","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/condicional/If.js"],"names":["props","elseChild","children","filter","child","type","name","ifChildren","test","Else"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAeA,KAAK,IAAI;AACpB,QAAMC,SAAS,GAAGD,KAAK,CAACE,QAAN,CAAeC,MAAf,CAAsBC,KAAK,IAAI;AAC7C,WAAOA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoB,MAAzC;AACH,GAFiB,EAEf,CAFe,CAAlB;AAIA,QAAMC,UAAU,GAAGP,KAAK,CAACE,QAAN,CAAeC,MAAf,CAAsBC,KAAK,IAAI;AAC9C,WAAOA,KAAK,KAAKH,SAAjB;AACH,GAFkB,CAAnB;;AAGA,MAAGD,KAAK,CAACQ,IAAT,EAAc;AACV,WAAOD,UAAP;AACH,GAFD,MAEK;AACD,WAAO,KAAP;AACH;AACJ,CAbD;AAeA,OAAO,MAAME,IAAI,GAAGT,KAAK,IAAIA,KAAK,CAACE,QAA5B,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;KA/DaO,I","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n//IMPORT REACT\r\n// import React from 'react'\r\n\r\n/**\r\n * AULA 32 - RENDERIZAÇÃO CONDICIONAL #03\r\n * \r\n * Vamos fazer a renderização com [if|else]\r\n * \r\n * Para funcionar precisaremos fazer algumas alterações:\r\n *  1) if.js > vamos exportar uma constante [else] com um componente funcional que ira retornar um props.children, ira passar propriedades que foram passadas para o componente...\r\n *  2) Como fazemos para importar um compoente que so possui um export....\r\n *      - Estavamos fazendo o export default\r\n *      - No import do If, iremos colocar tbm o import do componente...\r\n                import If, {Else} from './If'\r\n *  3) PERCEBA QUE ESTA APARECENDO AS DUAS CONDIÇÕES, TEREMOS QUE MECHER NO NOSSO IF PARA CONFIGURAR NESSE SENTIDO.\r\n * \r\n * FORMA 1\r\n * \r\n * Nosso componente <IF> possui um componente filho <Else>, para termos acesso a esse componente criamos uma variavel [elseChild] que fara uma filtragem dos filhos desse componente....\r\n    const elseChild = props.children.filter(child)\r\n *      Child => será uma função onde colocaremos a condição.\r\n        se child.type.name for igual a 'Else' teremos o componente [elseChild] que ira retornar um array, mas queremos pegar somente o primeiro [Else] -> para isso  [0]\r\n        const elseChild = props.children.filter(child => {\r\n        return child.type && child.type.name === 'Else'\r\n        })[0]\r\n        \r\n        Caso o primeiro elemento do array nao exista irá retornar um undefined.\r\n * \r\n * 1) vimos no console que o elemento[Else] existe como um objeto, caso não encontre o elemento será tratado como undefined.\r\n * \r\n * // FORMA 2\r\n * \r\n * Não queremos mostrar o Else caso não seja condição dele, para isso temos que criar um if para comprar com o primeiro valor da constante para elseChild que criamos\r\n * \r\n *  1) Agora nesse caso em vez de retornar o props.children vamos retornar o ifCHildren apenas...\r\n * \r\n */\r\n//FORMA 2\r\nexport default props => {\r\n    const elseChild = props.children.filter(child => {\r\n        return child.type && child.type.name === 'Else'\r\n    })[0]\r\n\r\n    const ifChildren = props.children.filter(child => {\r\n        return child !== elseChild\r\n    })\r\n    if(props.test){\r\n        return ifChildren\r\n    }else{\r\n        return false\r\n    }\r\n}\r\n\r\nexport const Else = props => props.children\r\n\r\n\r\n//FORMA 1\r\n// export default props => {\r\n//     const elseChild = props.children.filter(child => {\r\n//         return child.type && child.type.name === 'Else'\r\n//     })[0]\r\n//     console.log(elseChild)\r\n//     if (props.test) {\r\n//         return props.children\r\n//     } else {\r\n//         return false\r\n//     }\r\n// }\r\n\r\n// export const Else = props => props.children\r\n\r\n/***\r\n * AULA 31 - RENDERIZAÇÃO CONDICIONAL #02\r\n *\r\n * Vamos fazer um COMPONENTE para nos ajudar na renderização condicional\r\n *\r\n * Aula passada fizemos uma renderização condicional usando um OPERADOR TERNARIO. Agora iremos criar um componente e a partir dele conseguirmos renderizar um trecho .jsx ou não.\r\n *\r\n * Vamos criar um arquivo em /condicional>If.js ou js tanto faz\r\n *\r\n * FORMA 1\r\n *\r\n * Inicialmente vamos criar um componente funcional simples.\r\n *\r\n * A ideia é criar um componente com uma propriedade chamada teste, e nessa proprriedade teramos uma expressão que pode ser verdadeira ou falsa.\r\n * [Verdadeira] -> Conteudo de <span> será exibido.\r\n * [Falsa] -> Nada será renderizado\r\n *      <If test={expressão}> ============componente\r\n *          <span>...</span>  ============filhos do componente\r\n *          <span>...</span>\r\n *          <span>...</span>\r\n *      </If>\r\n *      <If test={aluno.nota >= 7}> ============componente\r\n *          <span>...</span>  ============filhos do componente\r\n *          <span>...</span>\r\n *          <span>...</span>\r\n *      </If>\r\n *\r\n * [props.children] -> Selecionar os elementos que foram passados no corpo de um componente.\r\n *  Retorno do if(props.test)\r\n *      <span>...</span>\r\n *      <span>...</span>\r\n *      <span>...</span>\r\n *\r\n * Vamos criar outro componente chamado UsuarioInfo.js para testar nosso compoennte if...\r\n *\r\n */\r\n//FORMA 1\r\n// export default props => {\r\n//     if(props.test){\r\n//         return props.children\r\n//     }else{\r\n//         return false\r\n//     }\r\n// }\r\n\r\n// export const Else = props => props.children"]},"metadata":{},"sourceType":"module"}