{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\formulario\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable import/no-anonymous-default-export */\n// IMPORT REACT\nimport React, { useState } from 'react'; // IMPORT ESTILO\n\nimport './Input.css';\n/**\r\n * AULA 36 - COMPONENTE CONTROLADO\r\n * \r\n * Vamos criar mais um exercicio para vermos um exemplo de input e vermos o conceito de COMPONENTE CONTROLADO.\r\n *      /FORMULARIO/input.jsx\r\n * \r\n * Ir no site https://pt-br.reactjs.org/docs/forms.html -> para ver a documentação sobre COMPONENTES CONTROLADOS.\r\n * Vamos ver que esses componentes possuem ligação com <input>|<textarea> |<select>\r\n * \r\n * FORMA 1\r\n * \r\n * 1) Criamos o componente <Input>\r\n * 2) Vamos importar ele agora dentro de App.jsx e criar um <card>.\r\n * 3) Vamos criar um estado [nome, função_mudança] -> ini = [inicial]\r\n * 4) No <input> vamos colocar um atributo chamado [value] que irá receber uma expressão {}, a que criamos acima...\r\n *          <input value={valor} />\r\n *          - Isso nos mostra a renderização do nosso componente com o valor inicial = 'Inicial'\r\n * 5) Vamos criar um Input.css para fazer algumas alterações no estilo e ver melhor os resultados.\r\n *          <div className = \"Input\">\r\n * \r\n * FORMA 2\r\n * \r\n * No momento atual, esperamos que se colocarmos o cursos em cima da caixa de <input> e digitarmos algo, ele mude para o que digitarmos, o que não irá acontecer.\r\n * \r\n * Porque? Ele é um COMPONENTE CONTROLADO, e o que ele chama de VERDADE ABSOLUTA são os DADOS.\r\n * \r\n * Seu DADO, ou seja, o ESTADO DO COMPONENTE, não mudou, não chamados nenhuma função de alteração [setvalor] para alterar o estado inicial 'type' para o que foi digitado no teclado.\r\n * \r\n * Ou seja, não conseguimos mudar o ESTADO de um componente diretamente a partir da INTERFACE, temos que mudar o ESTADO do componente para quando o ESTADO mudar, a mudança ser refletida na interface grafica.\r\n * \r\n * O 'caminho' é UNIDIRECIONAL o ESTADO muda, altera a INTERFACE GRAFICA, e não a INTERFACE muda e altera o ESTADO.\r\n * \r\n * Isso acontece indiretamente a partir dos EVENTOS\r\n * \r\n * \r\n * \r\n */\n// FORMA 1\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(props => {\n  _s();\n\n  const [valor, setValor] = useState('Type');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Input\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      value: valor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}, \"hVcneu0/yX4jPhr8s8iZ3//5lnw=\");","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/formulario/Input.jsx"],"names":["React","useState","props","valor","setValor"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B,C,CAEA;;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,kBAAeC,KAAK,IAAI;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,MAAD,CAAlC;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACI;AAAO,MAAA,KAAK,EAAEE;AAAd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAPD","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n// IMPORT REACT\r\nimport React, { useState} from 'react'\r\n\r\n// IMPORT ESTILO\r\nimport './Input.css'\r\n\r\n/**\r\n * AULA 36 - COMPONENTE CONTROLADO\r\n * \r\n * Vamos criar mais um exercicio para vermos um exemplo de input e vermos o conceito de COMPONENTE CONTROLADO.\r\n *      /FORMULARIO/input.jsx\r\n * \r\n * Ir no site https://pt-br.reactjs.org/docs/forms.html -> para ver a documentação sobre COMPONENTES CONTROLADOS.\r\n * Vamos ver que esses componentes possuem ligação com <input>|<textarea> |<select>\r\n * \r\n * FORMA 1\r\n * \r\n * 1) Criamos o componente <Input>\r\n * 2) Vamos importar ele agora dentro de App.jsx e criar um <card>.\r\n * 3) Vamos criar um estado [nome, função_mudança] -> ini = [inicial]\r\n * 4) No <input> vamos colocar um atributo chamado [value] que irá receber uma expressão {}, a que criamos acima...\r\n *          <input value={valor} />\r\n *          - Isso nos mostra a renderização do nosso componente com o valor inicial = 'Inicial'\r\n * 5) Vamos criar um Input.css para fazer algumas alterações no estilo e ver melhor os resultados.\r\n *          <div className = \"Input\">\r\n * \r\n * FORMA 2\r\n * \r\n * No momento atual, esperamos que se colocarmos o cursos em cima da caixa de <input> e digitarmos algo, ele mude para o que digitarmos, o que não irá acontecer.\r\n * \r\n * Porque? Ele é um COMPONENTE CONTROLADO, e o que ele chama de VERDADE ABSOLUTA são os DADOS.\r\n * \r\n * Seu DADO, ou seja, o ESTADO DO COMPONENTE, não mudou, não chamados nenhuma função de alteração [setvalor] para alterar o estado inicial 'type' para o que foi digitado no teclado.\r\n * \r\n * Ou seja, não conseguimos mudar o ESTADO de um componente diretamente a partir da INTERFACE, temos que mudar o ESTADO do componente para quando o ESTADO mudar, a mudança ser refletida na interface grafica.\r\n * \r\n * O 'caminho' é UNIDIRECIONAL o ESTADO muda, altera a INTERFACE GRAFICA, e não a INTERFACE muda e altera o ESTADO.\r\n * \r\n * Isso acontece indiretamente a partir dos EVENTOS\r\n * \r\n * \r\n * \r\n */\r\n// FORMA 1\r\nexport default props => {\r\n    const [valor, setValor] = useState('Type')\r\n    return (\r\n        <div className=\"Input\">\r\n            <input value={valor} />\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}