{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\layout\\\\Card.jsx\";\n\n/* eslint-disable import/no-anonymous-default-export */\nimport React from 'react';\nimport './Card.css';\n/**\r\n * \r\n *  AULA 24 - COMPONENTE CARD #3 -> passando cores como parametro;\r\n * \r\n * Vamos passar a cor como parametro la no app.jsx, para usar temos que colocar a propriedade [style] que ira receber um objeto chave e valor;\r\n * \r\n * O [-] não pode ser usando em nome de objeto\r\n * \r\n * \r\n */\n// FORMA 1\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  // Defininndo objeto com chave e valor par ao style\n  const estilo = {\n    backgroundColor: props.color\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card\",\n    style: estilo,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Title\",\n      children: props.titulo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Content\",\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n});\n/**\r\n * AULA 23 - COMPONENTE CARD #2 -> FLASK BOX (css)\r\n * \r\n * FORMA 1\r\n * \r\n * Em app.jsx vamos envolver todos os nosso componentes <Card> dentro de uma <div className=\"Cards\">\r\n * \r\n * Vamos tbm criar um arquivo css para o app.jsx\r\n * \r\n * Ao usar o display:flex podemos ver que foi separados em cards a nossa pagina com alguns problemas de renderização.\r\n * \r\n * Esses problemas são mais por questão do css do que pelo react em si..\r\n * \r\n *  CONHECER O FLEX BOX -> PARA DESENVOLVIMENTO WEB (CSS)\r\n\r\n */\n//FORMA 1\n// export default props => {\n//     // const title = props.titulo\n//     return (\n//         <div className=\"Card\">\n//             {/* <div className=\"Title\">{title}</div> */}\n//             <div className=\"Title\">{props.titulo}</div>\n//             <div className=\"Content\">\n//                 {props.children}\n//             </div>\n//         </div>\n//     )\n// }\n\n/**\r\n * AULA 22 - COMPONENTE CARD #1\r\n * \r\n * /////////////////////////// FORMA 1 ///////////////////////////\r\n *  vamos querer criar uma classe css para esse componente, logo vamos criar um arquivo chamado Card.css na mesma pasta.\r\n * e importar o css para esse file.\r\n * \r\n * class -> não eh um atributo usado no react e sim do html\r\n * classname -> usando no react. -> funciona usando [class] mas eh melhor usar a convenção;\r\n * \r\n * Mudando a fonte do card, vamos nos google fonts e pegamos o link que será referenciado dentro do HTML.\r\n * \r\n * <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n<link href=\"https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n * \r\n * Depois de colocar a referencia da fonte no .html no index.css vamos colocar a font-family oswald\r\n * \r\n * /////////////////////////// FORMA 2 ///////////////////////////\r\n * \r\n * FORMA 2 - A pergunta é como podemos passar para o nosso conteudo, em vez de colocar um fixo, passar outros elementos.\r\n * \r\n * No app.js queremos criar um card chamado desafio aleatorio e queremos passar o componente [aleatorio] para dentro do card.\r\n * \r\n * Perceba que em App.jsx quando passamos os <aleatorio> para dentro do <card> somente o conteudo do card esta sendo mostrado, e não o resultado da função <aleatorio< que criamos\r\n * \r\n * #### ACESSANDO FUNÇÃO DENTRO DE FUNÇÃO [props.children]\r\n * \r\n * - Para acessar os elementos do componentes (componente dentro de componente), usamos o [props.children]\r\n * \r\n * ARQUIVO App.jsx\r\n *      <Card titulo=\"Desafion Aleatorios\">\r\n *          <Aleatorio min={1} max={60} />\r\n *      </Card>\r\n * \r\n * ARQUIVO CARD.jsx\r\n * \r\n *      <div className=\"Content\">\r\n *          {props.childres}\r\n *      </div>\r\n * \r\n */\n// FORMA 2\n// export default props => {\n//     // const title = props.titulo\n//     return (\n//         <div className=\"Card\">\n//             {/* <div className=\"Title\">{title}</div> */}\n//             <div className=\"Title\">{props.titulo}</div>\n//             <div className=\"Content\">\n//                 {props.children}\n//             </div>\n//         </div>\n//     )\n// }\n// FORMA 1\n// export default props => {\n//     return (\n//         <div className=\"Card\">\n//             <div className=\"Title\">{props.titulo}</div>\n//             <div className=\"Content\">Conteudo</div>\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/layout/Card.jsx"],"names":["React","props","estilo","backgroundColor","color","titulo","children"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACC,gBAAeC,KAAK,IAAI;AACrB;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,eAAe,EAAEF,KAAK,CAACG;AADZ,GAAf;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAEF,MAA7B;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAAwBD,KAAK,CAACI;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACKJ,KAAK,CAACK;AADX;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAdA;AAgBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nimport React from 'react'\r\nimport './Card.css'\r\n\r\n\r\n/**\r\n * \r\n *  AULA 24 - COMPONENTE CARD #3 -> passando cores como parametro;\r\n * \r\n * Vamos passar a cor como parametro la no app.jsx, para usar temos que colocar a propriedade [style] que ira receber um objeto chave e valor;\r\n * \r\n * O [-] não pode ser usando em nome de objeto\r\n * \r\n * \r\n */\r\n\r\n// FORMA 1\r\n export default props => {\r\n    // Defininndo objeto com chave e valor par ao style\r\n    const estilo = {\r\n        backgroundColor: props.color\r\n    }\r\n    return (\r\n        <div className=\"Card\" style={estilo}>\r\n            {/* <div className=\"Title\">{title}</div> */}\r\n            <div className=\"Title\">{props.titulo}</div>\r\n            <div className=\"Content\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * AULA 23 - COMPONENTE CARD #2 -> FLASK BOX (css)\r\n * \r\n * FORMA 1\r\n * \r\n * Em app.jsx vamos envolver todos os nosso componentes <Card> dentro de uma <div className=\"Cards\">\r\n * \r\n * Vamos tbm criar um arquivo css para o app.jsx\r\n * \r\n * Ao usar o display:flex podemos ver que foi separados em cards a nossa pagina com alguns problemas de renderização.\r\n * \r\n * Esses problemas são mais por questão do css do que pelo react em si..\r\n * \r\n *  CONHECER O FLEX BOX -> PARA DESENVOLVIMENTO WEB (CSS)\r\n\r\n */\r\n\r\n//FORMA 1\r\n// export default props => {\r\n//     // const title = props.titulo\r\n//     return (\r\n//         <div className=\"Card\">\r\n//             {/* <div className=\"Title\">{title}</div> */}\r\n//             <div className=\"Title\">{props.titulo}</div>\r\n//             <div className=\"Content\">\r\n//                 {props.children}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n/**\r\n * AULA 22 - COMPONENTE CARD #1\r\n * \r\n * /////////////////////////// FORMA 1 ///////////////////////////\r\n *  vamos querer criar uma classe css para esse componente, logo vamos criar um arquivo chamado Card.css na mesma pasta.\r\n * e importar o css para esse file.\r\n * \r\n * class -> não eh um atributo usado no react e sim do html\r\n * classname -> usando no react. -> funciona usando [class] mas eh melhor usar a convenção;\r\n * \r\n * Mudando a fonte do card, vamos nos google fonts e pegamos o link que será referenciado dentro do HTML.\r\n * \r\n * <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n<link href=\"https://fonts.googleapis.com/css2?family=Oswald:wght@200;300;400;500;600;700&display=swap\" rel=\"stylesheet\">\r\n * \r\n * Depois de colocar a referencia da fonte no .html no index.css vamos colocar a font-family oswald\r\n * \r\n * /////////////////////////// FORMA 2 ///////////////////////////\r\n * \r\n * FORMA 2 - A pergunta é como podemos passar para o nosso conteudo, em vez de colocar um fixo, passar outros elementos.\r\n * \r\n * No app.js queremos criar um card chamado desafio aleatorio e queremos passar o componente [aleatorio] para dentro do card.\r\n * \r\n * Perceba que em App.jsx quando passamos os <aleatorio> para dentro do <card> somente o conteudo do card esta sendo mostrado, e não o resultado da função <aleatorio< que criamos\r\n * \r\n * #### ACESSANDO FUNÇÃO DENTRO DE FUNÇÃO [props.children]\r\n * \r\n * - Para acessar os elementos do componentes (componente dentro de componente), usamos o [props.children]\r\n * \r\n * ARQUIVO App.jsx\r\n *      <Card titulo=\"Desafion Aleatorios\">\r\n *          <Aleatorio min={1} max={60} />\r\n *      </Card>\r\n * \r\n * ARQUIVO CARD.jsx\r\n * \r\n *      <div className=\"Content\">\r\n *          {props.childres}\r\n *      </div>\r\n * \r\n */\r\n\r\n// FORMA 2\r\n// export default props => {\r\n//     // const title = props.titulo\r\n//     return (\r\n//         <div className=\"Card\">\r\n//             {/* <div className=\"Title\">{title}</div> */}\r\n//             <div className=\"Title\">{props.titulo}</div>\r\n//             <div className=\"Content\">\r\n//                 {props.children}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// FORMA 1\r\n// export default props => {\r\n//     return (\r\n//         <div className=\"Card\">\r\n//             <div className=\"Title\">{props.titulo}</div>\r\n//             <div className=\"Content\">Conteudo</div>\r\n//         </div>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}