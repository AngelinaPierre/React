{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\mega\\\\Mega.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable import/no-anonymous-default-export */\n// IMPORT REACT\nimport React, { useState } from 'react'; // IMPORT STYLE\n\nimport './Mega.css';\n/**\r\n * AULA 40 - DESAFIO MEGASENA #2\r\n * \r\n * O que fizemos na aula passada foi criar uma função em javascript, aora vamos criar um componente em react para usar esse metodo.\r\n * \r\n *      function gerarNumeroNaoContido(min,max,array){\r\n    const aleatorio = parseInt(Math.random() * ((max + 1)-min)) + min\r\n    return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n}\r\n\r\nfunction gerarNumeros(qtde){\r\n    const numeros = Array(qtde)\r\n    .fill(0)\r\n    .reduce((nums)=>{\r\n        const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n        console.log([...nums, novoNumero])\r\n        return [...nums, novoNumero]\r\n    },[])\r\n    .sort((n1.n2)=> n1 - n2)\r\n    return numeros\r\n}\r\nconsole.log(gerarNumeros)\r\n\r\nconsole.log(gerarNumeroNaoContido(1,60,[0,0,0,0,0,0]))\r\n * \r\n * FORMA 1\r\n * 1) /mega/mega.jsx\r\n * 2) Vamos usar a função [gerarNumero] para inicializar o ESTADO da aplicação.\r\n * 3) esperamos receber via [props] a quantidade de numeros inicial.\r\n * 4) logo na sequencia vamos definir os numeros dentrod e um <h3> para captar a partir de um estados q vamos criar.\r\n * 5) Vamos importar o {useState} e criar uma constante de array, que a partir da quanditdade inicial que iremos receber, ira criar um array com essa quantidade. vamos usar o fill(0) para mostrar no primeiro momento tudo zerado.\r\n *      const [numeros, setNumeros] = useState(Array(props.qtde).fill(0))\r\n\r\n * 6) Caso a quantidade não for passada, podemos assumir-la por valor padrão como 6\r\n        const [numeros, setNumeros] = useState(Array(props.qtde || 6).fill(0))\r\n * \r\n *  FORMA 2 - PODEMOS GERAR O ARRAY EM OUTRA LINHA PARA O CODIGO FICAR MENOR, E MELHOR DE VIZUALIZAR.\r\n * \r\n * 1) Agora vamos no componente App.jsx criar um novo card para a MEGASENA. \r\n * 2) Podemos na hora de exibir colocar um [.join(' ')] com espaço em branco para os numeros ficarem mais espaçados\r\n * \r\n * FORMA 3 - CRIANDO UM BOTAO PARA GERAR OS NUMEROS\r\n * \r\n * 1) no onclick vamos passar um evento(que nao nos importa logo _) e vamos passar o [setNumeros] junto com o [gerarNumeros].\r\n * 2) Vamos tbm criar uma ota constante [qtde] para nao termos que ficar repetindo a logica.\r\n * \r\n * FORMA 4 - Criando uma <labeL> com <input> para alterarmos a quantidade dos numeros gerados.\r\n * \r\n * 1) Vamos no [value] do <input> fazer ele apontar para um outro estdo que iremos criar para poder fazer essas alterações\r\n *      const [qtde, setQtde] - useState(props.qtde || 6)\r\n * 2) Nao vamos mais precisar da linha de codigo, pois criamos um estado para podermos fazer a alteração desse valor\r\n *      const qtde = props.qtde || 6 \r\n * 3) no [onChange] iremos receber um evento que será chamado para mudar esse valor.\r\n * \r\n * Agora estamos mudando os numeros de acordo com a quantidade pedida\r\n * \r\n * [app.jsx]\r\n * \r\n * 1) podemos receber essa quantidade via parametros , basta colocarmos o atributo de qtde na <Mega>\r\n * \r\n * FORMA 5 - Se quisermos que os numeros iniciais ja seja o valorgerado e nao 0\r\n * \r\n * 1) Re-utilizamos a função gerar numeros passando para ela a quantidade. Ja iniciando o numero da mega com numeros definos e não 0.\r\n * \r\n * [MEGA.CSS]\r\n * \r\n * Vamos agora estilizar um pouco nossa aplicação da megasena.\r\n * \r\n * FORMA 6 -> GERANDO NMERO NO MOMENTO QUE ESTAMOS ALTERANDO A QUANTIDADE\r\n * 1) no onChange, colocamos um corpo de função e adicionamos alem do setQtde as funçãoes aninhadas -> setNumeros(gerarNumeros(+e.target.value))\r\n * \r\n */\n// FORMA 6\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(props => {\n  _s();\n\n  function gerarNumeroNaoContido(min, max, array) {\n    const aleatorio = parseInt(Math.random() * (max + 1 - min)) + min;\n    return array.includes(aleatorio) ? gerarNumeroNaoContido(min, max, array) : aleatorio;\n  }\n\n  function gerarNumero(qtde) {\n    const numeros = Array(qtde).fill(0).reduce(nums => {\n      const novoNumero = gerarNumeroNaoContido(1, 60, nums);\n      console.log(...nums, novoNumero);\n      return [...nums, novoNumero];\n    }, []).sort((n1, n2) => n1 - n2);\n    return numeros;\n  }\n\n  console.log(gerarNumero); // const estados de mudança\n\n  const [qtde, setQtde] = useState(props.qtde || 6); // const numerosIniciais = Array(qtde).fill(0)\n\n  const numerosIniciais = gerarNumero(qtde);\n  const [numeros, setNumeros] = useState(numerosIniciais);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Mega\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mega\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: numeros.join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: \"Qtde N\\xFAmeros\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: qtde,\n        onChange: e => {\n          setQtde(+e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: _ => setNumeros(gerarNumero(qtde)),\n      children: \"Gerar N\\xFAmeros\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}, \"hW7daz/YEcx71pj2rOvpnZ6d7FM=\"); // FORMA 5\n// export default props => {\n//     // gerar numero não contido (os numeros gerados nao podem ser repetidos)\n//     function gerarNumeroNaoContido(min,max,array){\n//         const aleatorio = parseInt(Math.random() * ((max + 1) - min)) + min\n//         // se no array incluir ja o numero aleatorio, será gerado um novo numero caso nao, o numero sera retornado (aleatorio)\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\n//     }\n//     // gerando numeros e colocando no array\n//     function gerarNumero(qtde){\n//         const numeros = Array(qtde)\n//         .fill(0)\n//         .reduce((nums)=>{\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\n//             console.log(...nums,novoNumero)\n//             return [...nums,novoNumero]\n//         },[])\n//         .sort((n1,n2)=>n1-n2)\n//         return numeros\n//     }\n//     console.log(gerarNumero)\n//     // criando constante estados para fazer alterações.\n//     const [qtde, setQtde] = useState(props.qtde || 6)\n//     // const numerosIniciais = Array(qtde).fill(0)\n//     const numerosIniciais = gerarNumero(qtde)\n//     const [numeros, setNumeros] = useState(numerosIniciais)\n//     return(\n//         <div className='Mega'>\n//             <h2>Mega</h2>\n//             <h3>{numeros.join(' ')}</h3>\n//             <div>\n//                 <label htmlFor=\"\">Qtde de Números</label>\n//                 <input \n//                     type=\"number\"\n//                     value={qtde}\n//                     onChange={e => setQtde(+e.target.value)}\n//                 />\n//             </div>\n//             <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\n//         </div>\n//     )\n// }\n// FORMA 4\n// export default props => {\n//     function gerarNumeroNaoContido(min,max,array){\n//         const aleatorio = parseInt(Math.random() * ((max +1)-min)) + min\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\n//     }\n//     function gerarNumero(qtde){\n//         const numeros = Array(qtde)\n//         .fill(0)\n//         .reduce((nums) => {\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\n//             console.log(...nums,novoNumero)\n//             return [...nums,novoNumero]\n//         },[])\n//         .sort((n1,n2)=>n1-n2)\n//         return numeros\n//     }\n//     console.log(gerarNumero)\n//     const [qtde, setQtde] = useState(props.qtde || 6 )\n//     const numerosIniciais = Array(qtde).fill(0)\n//     const [numeros, setNumeros] = useState(numerosIniciais)\n//     return (\n//         <div>\n//             <h2>Mega</h2>\n//             <h3>{numeros.join(' ')}</h3>\n//             <div>\n//                 <label htmlFor=\"\">Quantidade de Números</label>\n//                 <input \n//                     type=\"number\"\n//                     value={qtde}\n//                     onChange={\n//                         e => setQtde(+e.target.value)\n//                     }\n//                 />\n//             </div>\n//             <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\n//         </div>\n//     )\n// }\n// FORMA 3\n// export default props => {\n//     function gerarNumeroNaoContido(min,max,array){\n//         const aleatorio = parseInt(Math.random() * ((max + 1)-min)) + min\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\n//     }\n//     function gerarNumero(qtde){\n//         const numeros = Array(qtde)\n//         .fill(0)\n//         .reduce((nums)=>{\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\n//             console.log(...nums,novoNumero)\n//             return [...nums, novoNumero]\n//         },[])\n//         .sort((n1,n2) => n1 - n2)\n//         return numeros\n//     }\n//     console.log(gerarNumero)\n//     const qtde = props.qtde || 6\n//     const numerosIniciais = Array(qtde).fill(0)\n//     const [numeros, setNumeros] = useState(numerosIniciais)\n//     // const numerosIniciais = Array(props.qtde || 6).fill(0)\n//     // const [numeros, setNumeros] = useState(numerosIniciais)\n//     return (\n//         <div>\n//             <h2>Mega</h2>\n//             <h3>{numeros.join(' ')}</h3>\n//             <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\n//         </div>\n//     )\n// }\n// FORMA 2\n// export default props => {\n//     function gerarNumeroNaoContido(min,max,array){\n//         const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\n//     }\n//     function gerarNumeros(qtde){\n//         const numeros = Array(qtde)\n//         .fill(0)\n//         .reduce((nums) =>{\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\n//             console.log(...nums,novoNumero)\n//             return [...nums, novoNumero]\n//         },[])\n//         .sort((n1,n2)=>n1-n2)\n//         return numeros\n//     }\n//     console.log(gerarNumeros)\n//     // criando array\n//     const numerosIniciais = Array(props.qtde || 6).fill(0)\n//     // criando um estado e passando o array de numerosIniciais ao useState\n//     const [numeros, setNumeros] = useState(numerosIniciais)\n//     // criando estado com array dentro\n//     // const [numeros, setNumeros] = useState(\n//     //     Array(props.qtde || 6)\n//     //     .fill(0)\n//     // )\n//     return (\n//         <div>\n//             <h2>Mega</h2>\n//             <h3>{numeros.join(' ')}</h3>\n//         </div>\n//     )\n// }\n// FORMA 1\n// export default props => {\n//     function gerarNumeroNaoContido (min,max,array){\n//         const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\n//     }\n//     function gerarNumeros(qtde){\n//         const numeros = Array(qtde)\n//         .fill(0)\n//         .reduce((nums)=>{\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\n//             console.log(...nums, novoNumero)\n//             return [...nums, novoNumero]\n//         },[])\n//         .sort((n1,n2)=> n1 - n2)\n//         return numeros\n//     }\n//     // console.log(gerarNumerosNaoContido(1,60,[0,0,0,0,0,0]))\n//     console.log(gerarNumeros)\n//     // criando estado com array dentro\n//     const [numeros, setNumeros] = useState(\n//         Array(props.qtde || 6)\n//         .fill(0)\n//     )\n//     return (\n//         <div>\n//             <h2>Mega</h2>\n//             <h3>{}</h3>\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/mega/Mega.jsx"],"names":["React","useState","props","gerarNumeroNaoContido","min","max","array","aleatorio","parseInt","Math","random","includes","gerarNumero","qtde","numeros","Array","fill","reduce","nums","novoNumero","console","log","sort","n1","n2","setQtde","numerosIniciais","setNumeros","join","e","target","value","_"],"mappings":"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":["/* eslint-disable import/no-anonymous-default-export */\r\n// IMPORT REACT\r\nimport React, { useState } from 'react'\r\n\r\n// IMPORT STYLE\r\nimport './Mega.css'\r\n\r\n/**\r\n * AULA 40 - DESAFIO MEGASENA #2\r\n * \r\n * O que fizemos na aula passada foi criar uma função em javascript, aora vamos criar um componente em react para usar esse metodo.\r\n * \r\n *      function gerarNumeroNaoContido(min,max,array){\r\n    const aleatorio = parseInt(Math.random() * ((max + 1)-min)) + min\r\n    return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n}\r\n\r\nfunction gerarNumeros(qtde){\r\n    const numeros = Array(qtde)\r\n    .fill(0)\r\n    .reduce((nums)=>{\r\n        const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n        console.log([...nums, novoNumero])\r\n        return [...nums, novoNumero]\r\n    },[])\r\n    .sort((n1.n2)=> n1 - n2)\r\n    return numeros\r\n}\r\nconsole.log(gerarNumeros)\r\n\r\nconsole.log(gerarNumeroNaoContido(1,60,[0,0,0,0,0,0]))\r\n * \r\n * FORMA 1\r\n * 1) /mega/mega.jsx\r\n * 2) Vamos usar a função [gerarNumero] para inicializar o ESTADO da aplicação.\r\n * 3) esperamos receber via [props] a quantidade de numeros inicial.\r\n * 4) logo na sequencia vamos definir os numeros dentrod e um <h3> para captar a partir de um estados q vamos criar.\r\n * 5) Vamos importar o {useState} e criar uma constante de array, que a partir da quanditdade inicial que iremos receber, ira criar um array com essa quantidade. vamos usar o fill(0) para mostrar no primeiro momento tudo zerado.\r\n *      const [numeros, setNumeros] = useState(Array(props.qtde).fill(0))\r\n\r\n * 6) Caso a quantidade não for passada, podemos assumir-la por valor padrão como 6\r\n        const [numeros, setNumeros] = useState(Array(props.qtde || 6).fill(0))\r\n * \r\n *  FORMA 2 - PODEMOS GERAR O ARRAY EM OUTRA LINHA PARA O CODIGO FICAR MENOR, E MELHOR DE VIZUALIZAR.\r\n * \r\n * 1) Agora vamos no componente App.jsx criar um novo card para a MEGASENA. \r\n * 2) Podemos na hora de exibir colocar um [.join(' ')] com espaço em branco para os numeros ficarem mais espaçados\r\n * \r\n * FORMA 3 - CRIANDO UM BOTAO PARA GERAR OS NUMEROS\r\n * \r\n * 1) no onclick vamos passar um evento(que nao nos importa logo _) e vamos passar o [setNumeros] junto com o [gerarNumeros].\r\n * 2) Vamos tbm criar uma ota constante [qtde] para nao termos que ficar repetindo a logica.\r\n * \r\n * FORMA 4 - Criando uma <labeL> com <input> para alterarmos a quantidade dos numeros gerados.\r\n * \r\n * 1) Vamos no [value] do <input> fazer ele apontar para um outro estdo que iremos criar para poder fazer essas alterações\r\n *      const [qtde, setQtde] - useState(props.qtde || 6)\r\n * 2) Nao vamos mais precisar da linha de codigo, pois criamos um estado para podermos fazer a alteração desse valor\r\n *      const qtde = props.qtde || 6 \r\n * 3) no [onChange] iremos receber um evento que será chamado para mudar esse valor.\r\n * \r\n * Agora estamos mudando os numeros de acordo com a quantidade pedida\r\n * \r\n * [app.jsx]\r\n * \r\n * 1) podemos receber essa quantidade via parametros , basta colocarmos o atributo de qtde na <Mega>\r\n * \r\n * FORMA 5 - Se quisermos que os numeros iniciais ja seja o valorgerado e nao 0\r\n * \r\n * 1) Re-utilizamos a função gerar numeros passando para ela a quantidade. Ja iniciando o numero da mega com numeros definos e não 0.\r\n * \r\n * [MEGA.CSS]\r\n * \r\n * Vamos agora estilizar um pouco nossa aplicação da megasena.\r\n * \r\n * FORMA 6 -> GERANDO NMERO NO MOMENTO QUE ESTAMOS ALTERANDO A QUANTIDADE\r\n * 1) no onChange, colocamos um corpo de função e adicionamos alem do setQtde as funçãoes aninhadas -> setNumeros(gerarNumeros(+e.target.value))\r\n * \r\n */\r\n// FORMA 6\r\nexport default props => {\r\n    function gerarNumeroNaoContido(min,max,array){\r\n        const aleatorio = parseInt(Math.random() * ((max + 1) - min)) + min\r\n        return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n    }\r\n    function gerarNumero(qtde){\r\n        const numeros = Array(qtde)\r\n        .fill(0)\r\n        .reduce((nums)=>{\r\n            const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n            console.log(...nums,novoNumero)\r\n            return [...nums, novoNumero]\r\n        },[])\r\n        .sort((n1,n2)=>n1-n2)\r\n        return numeros\r\n    }\r\n    console.log(gerarNumero)\r\n\r\n    // const estados de mudança\r\n    const [qtde, setQtde] = useState(props.qtde || 6)\r\n    // const numerosIniciais = Array(qtde).fill(0)\r\n    const numerosIniciais = gerarNumero(qtde)\r\n    const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n    return(\r\n        <div className='Mega'>\r\n            <h2>Mega</h2>\r\n            <h3>{numeros.join(' ')}</h3>\r\n            <div>\r\n                <label htmlFor=\"\">Qtde Números</label>\r\n                <input \r\n                    type=\"number\"\r\n                    value={qtde}\r\n                    onChange={(e) => {\r\n                        setQtde(+e.target.value)\r\n                    }}\r\n                />\r\n            </div>\r\n            <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// FORMA 5\r\n// export default props => {\r\n//     // gerar numero não contido (os numeros gerados nao podem ser repetidos)\r\n//     function gerarNumeroNaoContido(min,max,array){\r\n//         const aleatorio = parseInt(Math.random() * ((max + 1) - min)) + min\r\n//         // se no array incluir ja o numero aleatorio, será gerado um novo numero caso nao, o numero sera retornado (aleatorio)\r\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n//     }\r\n//     // gerando numeros e colocando no array\r\n//     function gerarNumero(qtde){\r\n//         const numeros = Array(qtde)\r\n//         .fill(0)\r\n//         .reduce((nums)=>{\r\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n//             console.log(...nums,novoNumero)\r\n//             return [...nums,novoNumero]\r\n//         },[])\r\n//         .sort((n1,n2)=>n1-n2)\r\n//         return numeros\r\n//     }\r\n//     console.log(gerarNumero)\r\n\r\n//     // criando constante estados para fazer alterações.\r\n//     const [qtde, setQtde] = useState(props.qtde || 6)\r\n//     // const numerosIniciais = Array(qtde).fill(0)\r\n//     const numerosIniciais = gerarNumero(qtde)\r\n//     const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n//     return(\r\n//         <div className='Mega'>\r\n//             <h2>Mega</h2>\r\n//             <h3>{numeros.join(' ')}</h3>\r\n//             <div>\r\n//                 <label htmlFor=\"\">Qtde de Números</label>\r\n//                 <input \r\n//                     type=\"number\"\r\n//                     value={qtde}\r\n//                     onChange={e => setQtde(+e.target.value)}\r\n//                 />\r\n//             </div>\r\n//             <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\r\n//         </div>\r\n//     )\r\n// }\r\n// FORMA 4\r\n// export default props => {\r\n//     function gerarNumeroNaoContido(min,max,array){\r\n//         const aleatorio = parseInt(Math.random() * ((max +1)-min)) + min\r\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n//     }\r\n//     function gerarNumero(qtde){\r\n//         const numeros = Array(qtde)\r\n//         .fill(0)\r\n//         .reduce((nums) => {\r\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n//             console.log(...nums,novoNumero)\r\n//             return [...nums,novoNumero]\r\n//         },[])\r\n//         .sort((n1,n2)=>n1-n2)\r\n//         return numeros\r\n//     }\r\n//     console.log(gerarNumero)\r\n\r\n//     const [qtde, setQtde] = useState(props.qtde || 6 )\r\n//     const numerosIniciais = Array(qtde).fill(0)\r\n//     const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Mega</h2>\r\n//             <h3>{numeros.join(' ')}</h3>\r\n//             <div>\r\n//                 <label htmlFor=\"\">Quantidade de Números</label>\r\n//                 <input \r\n//                     type=\"number\"\r\n//                     value={qtde}\r\n//                     onChange={\r\n//                         e => setQtde(+e.target.value)\r\n//                     }\r\n//                 />\r\n//             </div>\r\n//             <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\r\n//         </div>\r\n//     )\r\n// }\r\n// FORMA 3\r\n// export default props => {\r\n//     function gerarNumeroNaoContido(min,max,array){\r\n//         const aleatorio = parseInt(Math.random() * ((max + 1)-min)) + min\r\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n//     }\r\n//     function gerarNumero(qtde){\r\n//         const numeros = Array(qtde)\r\n//         .fill(0)\r\n//         .reduce((nums)=>{\r\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n//             console.log(...nums,novoNumero)\r\n//             return [...nums, novoNumero]\r\n//         },[])\r\n//         .sort((n1,n2) => n1 - n2)\r\n//         return numeros\r\n//     }\r\n//     console.log(gerarNumero)\r\n\r\n//     const qtde = props.qtde || 6\r\n//     const numerosIniciais = Array(qtde).fill(0)\r\n//     const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n//     // const numerosIniciais = Array(props.qtde || 6).fill(0)\r\n//     // const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>Mega</h2>\r\n//             <h3>{numeros.join(' ')}</h3>\r\n//             <button onClick={_ => setNumeros(gerarNumero(qtde))}>Gerar Números</button>\r\n//         </div>\r\n//     )\r\n// }\r\n// FORMA 2\r\n// export default props => {\r\n    \r\n//     function gerarNumeroNaoContido(min,max,array){\r\n//         const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\r\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n//     }\r\n//     function gerarNumeros(qtde){\r\n//         const numeros = Array(qtde)\r\n//         .fill(0)\r\n//         .reduce((nums) =>{\r\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n//             console.log(...nums,novoNumero)\r\n//             return [...nums, novoNumero]\r\n//         },[])\r\n//         .sort((n1,n2)=>n1-n2)\r\n//         return numeros\r\n//     }\r\n//     console.log(gerarNumeros)\r\n\r\n//     // criando array\r\n//     const numerosIniciais = Array(props.qtde || 6).fill(0)\r\n//     // criando um estado e passando o array de numerosIniciais ao useState\r\n//     const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n//     // criando estado com array dentro\r\n//     // const [numeros, setNumeros] = useState(\r\n//     //     Array(props.qtde || 6)\r\n//     //     .fill(0)\r\n//     // )\r\n//     return (\r\n//         <div>\r\n//             <h2>Mega</h2>\r\n//             <h3>{numeros.join(' ')}</h3>\r\n//         </div>\r\n//     )\r\n// }\r\n// FORMA 1\r\n// export default props => {\r\n\r\n//     function gerarNumeroNaoContido (min,max,array){\r\n//         const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\r\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n//     }\r\n\r\n//     function gerarNumeros(qtde){\r\n//         const numeros = Array(qtde)\r\n//         .fill(0)\r\n//         .reduce((nums)=>{\r\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n//             console.log(...nums, novoNumero)\r\n//             return [...nums, novoNumero]\r\n//         },[])\r\n//         .sort((n1,n2)=> n1 - n2)\r\n//         return numeros\r\n//     }\r\n//     // console.log(gerarNumerosNaoContido(1,60,[0,0,0,0,0,0]))\r\n//     console.log(gerarNumeros)\r\n    \r\n//     // criando estado com array dentro\r\n//     const [numeros, setNumeros] = useState(\r\n//         Array(props.qtde || 6)\r\n//         .fill(0)\r\n//     )\r\n//     return (\r\n//         <div>\r\n//             <h2>Mega</h2>\r\n//             <h3>{}</h3>\r\n//         </div>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}