{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\repeticao\\\\ListaAlunos.jsx\";\n\n/* eslint-disable import/no-anonymous-default-export */\n// import react\nimport React from 'react'; // import componentes\n\nimport alunos from '../../data/alunos.js';\n/**\r\n * AULA 27 - REPETIÇÃO\r\n * \r\n * Vamos criar outra pasta para esse exercicio chamada /repetição e criar um exercicio[listaAlunos.jsx] para mostrarmos uma lista.\r\n * \r\n * FORMA 2 - USANDO UM ARRAY COM INFORMAÇÕES PARA O COMPONENTE\r\n * \r\n * 1) como vamos conseguir transformar esses elementos em um elemento .jsx\r\n * 2) vamos criar uma constante chamado [li1] (forma bruta)\r\n * \r\n * \r\n * FORMA 3 - COMO TRANSFORMA UM ARRAY EM OUTRO ARRAY...\r\n * \r\n * 1) vamos querer um array de <LI>\r\n * 2) podemos transformar isso usando .map\r\n * 3) vamos criar uma constante chamada [lis] que ira receber o .map de alunos(pois estamos usando o metodo em cima da lista de alunos.js?), e ira retornar  uma <li1 - tipo a constante> para cada aluno nesse formato.\r\n * 4) o li1 não eh mais utilizado\r\n * \r\n * Resumo -> Basicamente transformamos uma lista de objetos do tipo ALUNO em trechos de jsx.\r\n * \r\n * 1) Da mesma forma que conseguimos pegar um trecho de .jsx e transformar em uma variavel:\r\n *          const li1 = (\r\n        <li>\r\n            {alunos[0].id} ) {alunos[0].nome} -> {alunos[0].nota}\r\n        </li>\r\n    )\r\n *\r\n *2) Conseguimos pegar um trecho .jsx atraves de uma função .map e transformar esses elementos em TRECHOS .jsx\r\n *          const lis = alunos.map(aluno => {\r\n        return (\r\n            <li>\r\n                {aluno.id} ) {aluno.nome} -> {aluno.nota}\r\n            </li>\r\n        )\r\n    })\r\n *\r\n *\r\n * FORMA 4 - ATRIBUTO KEY\r\n * \r\n * ==== TERMOS DE PROBLEMAS ====\r\n * \r\n * No colose mostra um erro pois não estamos usando o atributo [KEY]\r\n * \r\n * [key] é importante pois a partir dele o react pode será capaz de detectar as eventuais mudanças que possam acontecer.\r\n *  -Vamos supor que determinado elemento da lista teve um valor alterado e queremos que isso reflita na interface grafica.\r\n *  - com a [key] eh mais rapdio do que sem colocar.\r\n * \r\n */\n// FORMA 4\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  console.log(typeof alunos);\n  const alunosLI = alunos.map(aluno => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [aluno.id, \" ) \", aluno.nome, \" -> \", aluno.nota]\n    }, aluno.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: alunosLI\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}); //FORMA 3\n// export default props => {\n//     console.log(typeof alunos)\n//     const li1 = (\n//         <li>\n//             {alunos[0].id} ) {alunos[0].nome} -> {alunos[0].nota}\n//         </li>\n//     )\n//     console.log(typeof li1)\n//     const lis = alunos.map(aluno => {\n//         return (\n//             <li>\n//                 {aluno.id} ) {aluno.nome} -> {aluno.nota}\n//             </li>\n//         )\n//     })\n//     return (\n//         <div>\n//                 <ul>\n//                     {lis}\n//                 </ul>\n//             </div>\n//     )\n// }\n// FORMA 2\n// export default props => {\n//     console.log(alunos)\n//     const li1 = <li>{alunos[0].id}) {alunos[0].nome} -> {alunos[0].nota}</li>\n//     return (\n//         <div>\n//             <ul>\n//                 {li1}\n//                 <li>Daniel - 7.7</li>\n//                 <li>Carlos - 6.5</li>\n//             </ul>\n//         </div>\n//     )\n// }\n// FORMA 1\n// export default props => {\n//     return (\n//         <div>\n//             <ul>\n//                 <li>Ana - 9.7</li>\n//                 <li>Daniel - 7.7</li>\n//                 <li>Carlos - 6.5</li>\n//             </ul>\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/repeticao/ListaAlunos.jsx"],"names":["React","alunos","props","console","log","alunosLI","map","aluno","id","nome","nota"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,gBAAeC,KAAK,IAAI;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOH,MAAnB;AACA,QAAMI,QAAQ,GAAGJ,MAAM,CAACK,GAAP,CAAWC,KAAK,IAAI;AACjC,wBACI;AAAA,iBACKA,KAAK,CAACC,EADX,SACkBD,KAAK,CAACE,IADxB,UACkCF,KAAK,CAACG,IADxC;AAAA,OAASH,KAAK,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANgB,CAAjB;AAQA,sBACI;AAAA,2BACI;AAAA,gBACKH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAjBD,E,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n// import react\r\nimport React from 'react'\r\n\r\n// import componentes\r\nimport alunos from '../../data/alunos.js'\r\n\r\n/**\r\n * AULA 27 - REPETIÇÃO\r\n * \r\n * Vamos criar outra pasta para esse exercicio chamada /repetição e criar um exercicio[listaAlunos.jsx] para mostrarmos uma lista.\r\n * \r\n * FORMA 2 - USANDO UM ARRAY COM INFORMAÇÕES PARA O COMPONENTE\r\n * \r\n * 1) como vamos conseguir transformar esses elementos em um elemento .jsx\r\n * 2) vamos criar uma constante chamado [li1] (forma bruta)\r\n * \r\n * \r\n * FORMA 3 - COMO TRANSFORMA UM ARRAY EM OUTRO ARRAY...\r\n * \r\n * 1) vamos querer um array de <LI>\r\n * 2) podemos transformar isso usando .map\r\n * 3) vamos criar uma constante chamada [lis] que ira receber o .map de alunos(pois estamos usando o metodo em cima da lista de alunos.js?), e ira retornar  uma <li1 - tipo a constante> para cada aluno nesse formato.\r\n * 4) o li1 não eh mais utilizado\r\n * \r\n * Resumo -> Basicamente transformamos uma lista de objetos do tipo ALUNO em trechos de jsx.\r\n * \r\n * 1) Da mesma forma que conseguimos pegar um trecho de .jsx e transformar em uma variavel:\r\n *          const li1 = (\r\n        <li>\r\n            {alunos[0].id} ) {alunos[0].nome} -> {alunos[0].nota}\r\n        </li>\r\n    )\r\n *\r\n *2) Conseguimos pegar um trecho .jsx atraves de uma função .map e transformar esses elementos em TRECHOS .jsx\r\n *          const lis = alunos.map(aluno => {\r\n        return (\r\n            <li>\r\n                {aluno.id} ) {aluno.nome} -> {aluno.nota}\r\n            </li>\r\n        )\r\n    })\r\n *\r\n *\r\n * FORMA 4 - ATRIBUTO KEY\r\n * \r\n * ==== TERMOS DE PROBLEMAS ====\r\n * \r\n * No colose mostra um erro pois não estamos usando o atributo [KEY]\r\n * \r\n * [key] é importante pois a partir dele o react pode será capaz de detectar as eventuais mudanças que possam acontecer.\r\n *  -Vamos supor que determinado elemento da lista teve um valor alterado e queremos que isso reflita na interface grafica.\r\n *  - com a [key] eh mais rapdio do que sem colocar.\r\n * \r\n */\r\n\r\n// FORMA 4\r\nexport default props => {\r\n    console.log(typeof alunos)\r\n    const alunosLI = alunos.map(aluno => {\r\n        return (\r\n            <li key={aluno.id}>\r\n                {aluno.id} ) {aluno.nome} -> {aluno.nota}\r\n            </li>\r\n        )\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            <ul>\r\n                {alunosLI}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//FORMA 3\r\n// export default props => {\r\n//     console.log(typeof alunos)\r\n//     const li1 = (\r\n//         <li>\r\n//             {alunos[0].id} ) {alunos[0].nome} -> {alunos[0].nota}\r\n//         </li>\r\n//     )\r\n//     console.log(typeof li1)\r\n//     const lis = alunos.map(aluno => {\r\n//         return (\r\n//             <li>\r\n//                 {aluno.id} ) {aluno.nome} -> {aluno.nota}\r\n//             </li>\r\n//         )\r\n//     })\r\n//     return (\r\n//         <div>\r\n//                 <ul>\r\n//                     {lis}\r\n//                 </ul>\r\n//             </div>\r\n//     )\r\n// }\r\n\r\n// FORMA 2\r\n// export default props => {\r\n//     console.log(alunos)\r\n//     const li1 = <li>{alunos[0].id}) {alunos[0].nome} -> {alunos[0].nota}</li>\r\n//     return (\r\n//         <div>\r\n//             <ul>\r\n//                 {li1}\r\n//                 <li>Daniel - 7.7</li>\r\n//                 <li>Carlos - 6.5</li>\r\n//             </ul>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// FORMA 1\r\n// export default props => {\r\n//     return (\r\n//         <div>\r\n//             <ul>\r\n//                 <li>Ana - 9.7</li>\r\n//                 <li>Daniel - 7.7</li>\r\n//                 <li>Carlos - 6.5</li>\r\n//             </ul>\r\n//         </div>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}