{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\count\\\\Display.jsx\";\n\n/* eslint-disable import/no-anonymous-default-export */\n// IMPORT REACT\nimport React from 'react';\n/**\r\n * AULA 38 - CONTADOR #02 [DIVIDINDO EM VARIOS COMPONENTES]\r\n * \r\n * [COMPOENTES]\r\n *      1) DISPLAY -> ONDE ESTA MOSTRANDO O VALOR\r\n *      2) FORMULARIO -> ONDE INC/DEC O PASSO\r\n *      3) BOTÕES\r\n * \r\n * CONTINUAREMOS MANTENDO O ESTADO DO COMPONENTE DENTRO DO CONTADOR, QUE SERÁ O COMPONENTE PAI.\r\n * \r\n * 1) Criar /count/display.jsx [componente funcional]\r\n * 1.1) Em count.jsx vamos importar o display.jsx, e no lugar onde tinhamos o <h3> colocamos <Display numero={this.state.numero}\r\n * 2) Buttons.jsx\r\n * 2.1) Nos botões vamos receber a partir de props [props.incrementar] e [props.decrementar] são os nomes das propriedades que iremos passar no count.jsx.\r\n * \r\n * FORMA 1 [BUTTONS] -> Na forma que esta em count.jsx (sem parametros) se clicarmos nos botões nada irá acontencer. Logo temos que passar as funções de incrementar e decrementar no Count.jsx\r\n * 3) /count/PassForm.jsx\r\n * 3.1) no onChange, se deixarmos [props.setPasso] será passado o EVENTO, mas queremos que o novo numero seja passado logo, entao criamos um elemento para receber o evento (e) e chamamos o setPasso() convertendo para numerico com (+).\r\n * 3.3) se nao colocar o onchange não altera o valor.\r\n * 3.4) passo={this.state.passo} são informações passadas de pai para filho\r\n * 3.5) setPasso={this.setPass} estamos passando ma função para o filho de tal forma que quando o evento acontece o componente filho manda de volta a informação do novoPasso que precisa ser alterado no ESTADO. \r\n * \r\n */\n// FORMA 1 -> O DISPLAY REPRESENTA NO CONTADOR SOMENTE O <H3>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default (props => {\n  return /*#__PURE__*/_jsxDEV(\"h3\", {\n    children: props.num\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n});","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/count/Display.jsx"],"names":["React","props","num"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAeC,KAAK,IAAI;AACpB,sBACI;AAAA,cAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAJD","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n// IMPORT REACT\r\nimport React from 'react'\r\n\r\n/**\r\n * AULA 38 - CONTADOR #02 [DIVIDINDO EM VARIOS COMPONENTES]\r\n * \r\n * [COMPOENTES]\r\n *      1) DISPLAY -> ONDE ESTA MOSTRANDO O VALOR\r\n *      2) FORMULARIO -> ONDE INC/DEC O PASSO\r\n *      3) BOTÕES\r\n * \r\n * CONTINUAREMOS MANTENDO O ESTADO DO COMPONENTE DENTRO DO CONTADOR, QUE SERÁ O COMPONENTE PAI.\r\n * \r\n * 1) Criar /count/display.jsx [componente funcional]\r\n * 1.1) Em count.jsx vamos importar o display.jsx, e no lugar onde tinhamos o <h3> colocamos <Display numero={this.state.numero}\r\n * 2) Buttons.jsx\r\n * 2.1) Nos botões vamos receber a partir de props [props.incrementar] e [props.decrementar] são os nomes das propriedades que iremos passar no count.jsx.\r\n * \r\n * FORMA 1 [BUTTONS] -> Na forma que esta em count.jsx (sem parametros) se clicarmos nos botões nada irá acontencer. Logo temos que passar as funções de incrementar e decrementar no Count.jsx\r\n * 3) /count/PassForm.jsx\r\n * 3.1) no onChange, se deixarmos [props.setPasso] será passado o EVENTO, mas queremos que o novo numero seja passado logo, entao criamos um elemento para receber o evento (e) e chamamos o setPasso() convertendo para numerico com (+).\r\n * 3.3) se nao colocar o onchange não altera o valor.\r\n * 3.4) passo={this.state.passo} são informações passadas de pai para filho\r\n * 3.5) setPasso={this.setPass} estamos passando ma função para o filho de tal forma que quando o evento acontece o componente filho manda de volta a informação do novoPasso que precisa ser alterado no ESTADO. \r\n * \r\n */\r\n// FORMA 1 -> O DISPLAY REPRESENTA NO CONTADOR SOMENTE O <H3>\r\nexport default props => {\r\n    return (\r\n        <h3>{props.num}</h3>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}