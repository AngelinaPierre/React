{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\mega\\\\Mega.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable import/no-anonymous-default-export */\n// IMPORT REACT\nimport React, { useState } from 'react';\n/**\r\n * AULA 40 - DESAFIO MEGASENA #2\r\n * \r\n * O que fizemos na aula passada foi criar uma função em javascript, aora vamos criar um componente em react para usar esse metodo.\r\n * \r\n *      function gerarNumeroNaoContido(min,max,array){\r\n    const aleatorio = parseInt(Math.random() * ((max + 1)-min)) + min\r\n    return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n}\r\n\r\nfunction gerarNumeros(qtde){\r\n    const numeros = Array(qtde)\r\n    .fill(0)\r\n    .reduce((nums)=>{\r\n        const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n        console.log([...nums, novoNumero])\r\n        return [...nums, novoNumero]\r\n    },[])\r\n    .sort((n1.n2)=> n1 - n2)\r\n    return numeros\r\n}\r\nconsole.log(gerarNumeros)\r\n\r\nconsole.log(gerarNumeroNaoContido(1,60,[0,0,0,0,0,0]))\r\n * \r\n * FORMA 1\r\n * 1) /mega/mega.jsx\r\n * 2) Vamos usar a função [gerarNumero] para inicializar o ESTADO da aplicação.\r\n * 3) esperamos receber via [props] a quantidade de numeros inicial.\r\n * 4) logo na sequencia vamos definir os numeros dentrod e um <h3> para captar a partir de um estados q vamos criar.\r\n * 5) Vamos importar o {useState} e criar uma constante de array, que a partir da quanditdade inicial que iremos receber, ira criar um array com essa quantidade. vamos usar o fill(0) para mostrar no primeiro momento tudo zerado.\r\n *      const [numeros, setNumeros] = useState(Array(props.qtde).fill(0))\r\n\r\n * 6) Caso a quantidade não for passada, podemos assumir-la por valor padrão como 6\r\n        const [numeros, setNumeros] = useState(Array(props.qtde || 6).fill(0))\r\n * \r\n *  FORMA 2 - PODEMOS GERAR O ARRAY EM OUTRA LINHA PARA O CODIGO FICAR MENOR, E MELHOR DE VIZUALIZAR.\r\n * \r\n * 1) Agora vamos no componente App.jsx criar um novo card para a MEGASENA. \r\n * 2)\r\n * \r\n */\n// FORMA 2\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(props => {\n  _s();\n\n  function gerarNumeroNaoContido(min, max, array) {\n    const aleatorio = parseInt(Math.random() * (max + 1 - min)) + min;\n    return array.includes(aleatorio) ? gerarNumeroNaoContido(min, max, array) : aleatorio;\n  }\n\n  function gerarNumeros(qtde) {\n    const numeros = Array(qtde).fill(0).reduce(nums => {\n      const novoNumero = gerarNumeroNaoContido(1, 60, nums);\n      console.log(...nums, novoNumero);\n      return [...nums, novoNumero];\n    }, []).sort((n1, n2) => n1 - n2);\n    return numeros;\n  }\n\n  console.log(gerarNumeros); // criando array\n\n  const numerosIniciais = Array(props.qtde || 6); // criando um estado e passando o array de numerosIniciais ao useState\n\n  const [numeros, setNumeros] = useState(numerosIniciais); // criando estado com array dentro\n  // const [numeros, setNumeros] = useState(\n  //     Array(props.qtde || 6)\n  //     .fill(0)\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mega\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: numeros\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}, \"Mie2YIuNH2pyJ6DuzmqZRMMlbzA=\"); // FORMA 1\n// export default props => {\n//     function gerarNumeroNaoContido (min,max,array){\n//         const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\n//     }\n//     function gerarNumeros(qtde){\n//         const numeros = Array(qtde)\n//         .fill(0)\n//         .reduce((nums)=>{\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\n//             console.log(...nums, novoNumero)\n//             return [...nums, novoNumero]\n//         },[])\n//         .sort((n1,n2)=> n1 - n2)\n//         return numeros\n//     }\n//     // console.log(gerarNumerosNaoContido(1,60,[0,0,0,0,0,0]))\n//     console.log(gerarNumeros)\n//     // criando estado com array dentro\n//     const [numeros, setNumeros] = useState(\n//         Array(props.qtde || 6)\n//         .fill(0)\n//     )\n//     return (\n//         <div>\n//             <h2>Mega</h2>\n//             <h3>{}</h3>\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/mega/Mega.jsx"],"names":["React","useState","props","gerarNumeroNaoContido","min","max","array","aleatorio","parseInt","Math","random","includes","gerarNumeros","qtde","numeros","Array","fill","reduce","nums","novoNumero","console","log","sort","n1","n2","numerosIniciais","setNumeros"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,kBAAeC,KAAK,IAAI;AAAA;;AAEpB,WAASC,qBAAT,CAA+BC,GAA/B,EAAmCC,GAAnC,EAAuCC,KAAvC,EAA6C;AACzC,UAAMC,SAAS,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAL,MAAkBL,GAAG,GAAG,CAAP,GAAWD,GAA5B,CAAD,CAAR,GAA6CA,GAA/D;AACA,WAAOE,KAAK,CAACK,QAAN,CAAeJ,SAAf,IAA4BJ,qBAAqB,CAACC,GAAD,EAAKC,GAAL,EAASC,KAAT,CAAjD,GAAmEC,SAA1E;AACH;;AACD,WAASK,YAAT,CAAsBC,IAAtB,EAA2B;AACvB,UAAMC,OAAO,GAAGC,KAAK,CAACF,IAAD,CAAL,CACfG,IADe,CACV,CADU,EAEfC,MAFe,CAEPC,IAAD,IAAS;AACb,YAAMC,UAAU,GAAGhB,qBAAqB,CAAC,CAAD,EAAG,EAAH,EAAMe,IAAN,CAAxC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAGH,IAAf,EAAoBC,UAApB;AACA,aAAO,CAAC,GAAGD,IAAJ,EAAUC,UAAV,CAAP;AACH,KANe,EAMd,EANc,EAOfG,IAPe,CAOV,CAACC,EAAD,EAAIC,EAAJ,KAASD,EAAE,GAACC,EAPF,CAAhB;AAQA,WAAOV,OAAP;AACH;;AACDM,EAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ,EAjBoB,CAmBpB;;AACA,QAAMa,eAAe,GAAGV,KAAK,CAACb,KAAK,CAACW,IAAN,IAAc,CAAf,CAA7B,CApBoB,CAqBpB;;AACA,QAAM,CAACC,OAAD,EAAUY,UAAV,IAAwBzB,QAAQ,CAACwB,eAAD,CAAtC,CAtBoB,CAwBpB;AACA;AACA;AACA;AACA;;AACA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAKX;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAnCD,kC,CAoCA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\n// IMPORT REACT\r\nimport React, { useState } from 'react'\r\n\r\n/**\r\n * AULA 40 - DESAFIO MEGASENA #2\r\n * \r\n * O que fizemos na aula passada foi criar uma função em javascript, aora vamos criar um componente em react para usar esse metodo.\r\n * \r\n *      function gerarNumeroNaoContido(min,max,array){\r\n    const aleatorio = parseInt(Math.random() * ((max + 1)-min)) + min\r\n    return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n}\r\n\r\nfunction gerarNumeros(qtde){\r\n    const numeros = Array(qtde)\r\n    .fill(0)\r\n    .reduce((nums)=>{\r\n        const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n        console.log([...nums, novoNumero])\r\n        return [...nums, novoNumero]\r\n    },[])\r\n    .sort((n1.n2)=> n1 - n2)\r\n    return numeros\r\n}\r\nconsole.log(gerarNumeros)\r\n\r\nconsole.log(gerarNumeroNaoContido(1,60,[0,0,0,0,0,0]))\r\n * \r\n * FORMA 1\r\n * 1) /mega/mega.jsx\r\n * 2) Vamos usar a função [gerarNumero] para inicializar o ESTADO da aplicação.\r\n * 3) esperamos receber via [props] a quantidade de numeros inicial.\r\n * 4) logo na sequencia vamos definir os numeros dentrod e um <h3> para captar a partir de um estados q vamos criar.\r\n * 5) Vamos importar o {useState} e criar uma constante de array, que a partir da quanditdade inicial que iremos receber, ira criar um array com essa quantidade. vamos usar o fill(0) para mostrar no primeiro momento tudo zerado.\r\n *      const [numeros, setNumeros] = useState(Array(props.qtde).fill(0))\r\n\r\n * 6) Caso a quantidade não for passada, podemos assumir-la por valor padrão como 6\r\n        const [numeros, setNumeros] = useState(Array(props.qtde || 6).fill(0))\r\n * \r\n *  FORMA 2 - PODEMOS GERAR O ARRAY EM OUTRA LINHA PARA O CODIGO FICAR MENOR, E MELHOR DE VIZUALIZAR.\r\n * \r\n * 1) Agora vamos no componente App.jsx criar um novo card para a MEGASENA. \r\n * 2)\r\n * \r\n */\r\n// FORMA 2\r\nexport default props => {\r\n    \r\n    function gerarNumeroNaoContido(min,max,array){\r\n        const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\r\n        return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n    }\r\n    function gerarNumeros(qtde){\r\n        const numeros = Array(qtde)\r\n        .fill(0)\r\n        .reduce((nums) =>{\r\n            const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n            console.log(...nums,novoNumero)\r\n            return [...nums, novoNumero]\r\n        },[])\r\n        .sort((n1,n2)=>n1-n2)\r\n        return numeros\r\n    }\r\n    console.log(gerarNumeros)\r\n\r\n    // criando array\r\n    const numerosIniciais = Array(props.qtde || 6)\r\n    // criando um estado e passando o array de numerosIniciais ao useState\r\n    const [numeros, setNumeros] = useState(numerosIniciais)\r\n\r\n    // criando estado com array dentro\r\n    // const [numeros, setNumeros] = useState(\r\n    //     Array(props.qtde || 6)\r\n    //     .fill(0)\r\n    // )\r\n    return (\r\n        <div>\r\n            <h2>Mega</h2>\r\n            <h3>{numeros}</h3>\r\n        </div>\r\n    )\r\n}\r\n// FORMA 1\r\n// export default props => {\r\n\r\n//     function gerarNumeroNaoContido (min,max,array){\r\n//         const aleatorio = parseInt(Math.random() * ((max + 1)- min)) + min\r\n//         return array.includes(aleatorio) ? gerarNumeroNaoContido(min,max,array) : aleatorio\r\n//     }\r\n\r\n//     function gerarNumeros(qtde){\r\n//         const numeros = Array(qtde)\r\n//         .fill(0)\r\n//         .reduce((nums)=>{\r\n//             const novoNumero = gerarNumeroNaoContido(1,60,nums)\r\n//             console.log(...nums, novoNumero)\r\n//             return [...nums, novoNumero]\r\n//         },[])\r\n//         .sort((n1,n2)=> n1 - n2)\r\n//         return numeros\r\n//     }\r\n//     // console.log(gerarNumerosNaoContido(1,60,[0,0,0,0,0,0]))\r\n//     console.log(gerarNumeros)\r\n    \r\n//     // criando estado com array dentro\r\n//     const [numeros, setNumeros] = useState(\r\n//         Array(props.qtde || 6)\r\n//         .fill(0)\r\n//     )\r\n//     return (\r\n//         <div>\r\n//             <h2>Mega</h2>\r\n//             <h3>{}</h3>\r\n//         </div>\r\n//     )\r\n// }"]},"metadata":{},"sourceType":"module"}