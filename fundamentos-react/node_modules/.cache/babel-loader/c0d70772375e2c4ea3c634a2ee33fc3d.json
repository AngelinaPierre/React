{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PEREIRAG\\\\Documents\\\\ANGELINA\\\\REACT\\\\curso-react\\\\fundamentos-react\\\\src\\\\components\\\\contador\\\\Contador.jsx\";\n//IMPORT REACT COM COMPONENT\nimport React, { Component } from 'react'; // IMPORT REACT 3.2\n// import React from 'react'\n\n/**\r\n * AULA 37 - CONTADOR #01 [COMPONENTE BASEADO EM CLASSE]\r\n *\r\n * Com o advento dos HOOKS, 99% do que precisamos em um COMPONENTE pode ser feito em um COMPONENTE FUNCIONAL. Atigamente não tinhamos ESTADO, atualmente temos, não tinhamos como tratar um METODO DE CICLO DE VIDA, atualmente podemos.\r\n * \r\n * Dentro de um COMPONENTE REACT BASEADO EM CLASSE, nos temos os METODOS DE CICLO DE VIDA\r\n *      SEARCH ENGINE: REACT LIFE CYCLE METHODS (exemplos antigos)\r\n *          - constructor()\r\n *          - static getDerivedStateFromProps()\r\n *          - render()\r\n *          - componentDidMount()\r\n * \r\n * 1) Criar uma pasta para o CONTADOR --> /contador\r\n * 2) Dentro dessa pasta vamos criar nosso componente inicial chamado [contador.jsx]. Inicialmente vamos colocar tudo dentro do contador e depois vamos quebra-lo parra evoluir um pouco mais e irmos estabelecendo as comunicações.\r\n * 3) vamos criar um expor default mas agora vamos criar uma CLASS onde o nome do COMPONENTE será [Contador] e vamos extender [extends] a partir de React.Component\r\n * \r\n *      3.1)[forma 1]\r\n *          import React, { Component } from 'react\r\n *          export default class Contador extends Component{}\r\n *      3.2)[forma2]\r\n *          import React from 'react'\r\n *          export default class Contador extends React.Component{}\r\n *      3.3)[forma 3] - se não quisermos exportar default, colocamos no final\r\n *          import React from 'react'\r\n *          class Contador extends React.Component{}\r\n *          export default Contador\r\n *      - Criamos um classe e no final a exportamos\r\n * \r\n * ==========================[VISÃO GERAL DO REACT.COMPONENT]==========================\r\n * React permite definirmos componentes como classes (class components) ou como funções. Componentes definidos como classes possuem mais funcionalidades que serão detalhadas nesta página. Para definir um class component, a classe precisa estender React.Component:\r\n *              class Welcome extends React.Component {\r\n                        render() {\r\n                                return <h1>Olá, {this.props.name}</h1>;\r\n                        }\r\n                }\r\n * O único método que você deve definir em uma subclasse de React.Component é chamado render(). Todos os outros métodos descritos nesta página são opcionais.\r\n * \r\n * -> [CICLO DE VIDA DE UM COMPONENTE]\r\n * Cada componente possui muitos “métodos do ciclo de vida” que você pode sobrescrever para executar determinado código em momentos particulares do processo. Você pode usar este diagrama do ciclo de vida(https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) para consulta. Na lista abaixo, os métodos do ciclo de vida mais usados estão marcados COM **. O resto deles, existe para o uso em casos relativamente raros.\r\n *          ** constructor()\r\n *          static getDerivedStateFromProps()\r\n *          ** render()\r\n *          ** componentDidMount()\r\n * \r\n * Nota:Estes métodos são considerados legado e você deve evitá-los em código novo:\r\n            UNSAFE_componentWillMount()\r\n * (entre outros)\r\n * \r\n * // FORMA 1\r\n * \r\n * -> Vamos criar um 'ola mundo' baseado em CLASSE\r\n * \r\n * 1) Temos que chamar a função [render()], o COMPONENTE chamará essa função para ser renderizado.\r\n * 2) e dentro da função [render()] podemos retornar uma <div> com um <h2>Contador</h2>\r\n * \r\n * -> Essa é a primeira versão do nosso componente, temos uma [classe -> Contador] que usa a extensão dos componentes. E o que for retornar da função [render()] será o nosso JSX.\r\n * 3) VAMOS IMPORTAR AGORA PARA O APP.JSX\r\n * \r\n * // FORMA 2 - Como vamos definir o ESTADO dentro do nosso COMPONENTE baseado em CLASSE.\r\n * \r\n * 1) Criamos um [state](uma propriedade) , e essa propriedade ser inicializada com um OBJETO.\r\n *      - No caso da função podemos usar o useState e atribuir um objeto para para dentro do usestate e ir mechendo nesse objeto\r\n *      - No caso atual, temos apenas um unico estado [state] acessando ele a partir da classe.\r\n * 2) dentro do [state] vamos colocar todos os atributos necessarios para o nosso contador.\r\n *      - Nosso contador terá um numero, começando em 0.\r\n *      - Vamos querer passar para esse componente um valor inicial, que seria o numero inicial do contador.\r\n * 3) [App.js] atributo [numeroInicial={10}]\r\n * \r\n * \r\n */\n// FORMA 2\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Contador extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numero: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contador\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n} // FORMA 1\n// class Contador extends Component {\n//     render(){\n//         return(\n//             <div>\n//                 <h2>Contador</h2>\n//             </div>\n//         )\n//     }\n// }\n\n\nexport default Contador;","map":{"version":3,"sources":["C:/Users/PEREIRAG/Documents/ANGELINA/REACT/curso-react/fundamentos-react/src/components/contador/Contador.jsx"],"names":["React","Component","Contador","state","numero","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B,C,CACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7BE,KAD6B,GACrB;AACJC,MAAAA,MAAM,EAAE;AADJ,KADqB;AAAA;;AAI7BC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAV4B,C,CAYjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeH,QAAf","sourcesContent":["//IMPORT REACT COM COMPONENT\r\nimport React, {Component} from 'react'\r\n// IMPORT REACT 3.2\r\n// import React from 'react'\r\n\r\n\r\n\r\n/**\r\n * AULA 37 - CONTADOR #01 [COMPONENTE BASEADO EM CLASSE]\r\n *\r\n * Com o advento dos HOOKS, 99% do que precisamos em um COMPONENTE pode ser feito em um COMPONENTE FUNCIONAL. Atigamente não tinhamos ESTADO, atualmente temos, não tinhamos como tratar um METODO DE CICLO DE VIDA, atualmente podemos.\r\n * \r\n * Dentro de um COMPONENTE REACT BASEADO EM CLASSE, nos temos os METODOS DE CICLO DE VIDA\r\n *      SEARCH ENGINE: REACT LIFE CYCLE METHODS (exemplos antigos)\r\n *          - constructor()\r\n *          - static getDerivedStateFromProps()\r\n *          - render()\r\n *          - componentDidMount()\r\n * \r\n * 1) Criar uma pasta para o CONTADOR --> /contador\r\n * 2) Dentro dessa pasta vamos criar nosso componente inicial chamado [contador.jsx]. Inicialmente vamos colocar tudo dentro do contador e depois vamos quebra-lo parra evoluir um pouco mais e irmos estabelecendo as comunicações.\r\n * 3) vamos criar um expor default mas agora vamos criar uma CLASS onde o nome do COMPONENTE será [Contador] e vamos extender [extends] a partir de React.Component\r\n * \r\n *      3.1)[forma 1]\r\n *          import React, { Component } from 'react\r\n *          export default class Contador extends Component{}\r\n *      3.2)[forma2]\r\n *          import React from 'react'\r\n *          export default class Contador extends React.Component{}\r\n *      3.3)[forma 3] - se não quisermos exportar default, colocamos no final\r\n *          import React from 'react'\r\n *          class Contador extends React.Component{}\r\n *          export default Contador\r\n *      - Criamos um classe e no final a exportamos\r\n * \r\n * ==========================[VISÃO GERAL DO REACT.COMPONENT]==========================\r\n * React permite definirmos componentes como classes (class components) ou como funções. Componentes definidos como classes possuem mais funcionalidades que serão detalhadas nesta página. Para definir um class component, a classe precisa estender React.Component:\r\n *              class Welcome extends React.Component {\r\n                        render() {\r\n                                return <h1>Olá, {this.props.name}</h1>;\r\n                        }\r\n                }\r\n * O único método que você deve definir em uma subclasse de React.Component é chamado render(). Todos os outros métodos descritos nesta página são opcionais.\r\n * \r\n * -> [CICLO DE VIDA DE UM COMPONENTE]\r\n * Cada componente possui muitos “métodos do ciclo de vida” que você pode sobrescrever para executar determinado código em momentos particulares do processo. Você pode usar este diagrama do ciclo de vida(https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) para consulta. Na lista abaixo, os métodos do ciclo de vida mais usados estão marcados COM **. O resto deles, existe para o uso em casos relativamente raros.\r\n *          ** constructor()\r\n *          static getDerivedStateFromProps()\r\n *          ** render()\r\n *          ** componentDidMount()\r\n * \r\n * Nota:Estes métodos são considerados legado e você deve evitá-los em código novo:\r\n            UNSAFE_componentWillMount()\r\n * (entre outros)\r\n * \r\n * // FORMA 1\r\n * \r\n * -> Vamos criar um 'ola mundo' baseado em CLASSE\r\n * \r\n * 1) Temos que chamar a função [render()], o COMPONENTE chamará essa função para ser renderizado.\r\n * 2) e dentro da função [render()] podemos retornar uma <div> com um <h2>Contador</h2>\r\n * \r\n * -> Essa é a primeira versão do nosso componente, temos uma [classe -> Contador] que usa a extensão dos componentes. E o que for retornar da função [render()] será o nosso JSX.\r\n * 3) VAMOS IMPORTAR AGORA PARA O APP.JSX\r\n * \r\n * // FORMA 2 - Como vamos definir o ESTADO dentro do nosso COMPONENTE baseado em CLASSE.\r\n * \r\n * 1) Criamos um [state](uma propriedade) , e essa propriedade ser inicializada com um OBJETO.\r\n *      - No caso da função podemos usar o useState e atribuir um objeto para para dentro do usestate e ir mechendo nesse objeto\r\n *      - No caso atual, temos apenas um unico estado [state] acessando ele a partir da classe.\r\n * 2) dentro do [state] vamos colocar todos os atributos necessarios para o nosso contador.\r\n *      - Nosso contador terá um numero, começando em 0.\r\n *      - Vamos querer passar para esse componente um valor inicial, que seria o numero inicial do contador.\r\n * 3) [App.js] atributo [numeroInicial={10}]\r\n * \r\n * \r\n */\r\n// FORMA 2\r\nclass Contador extends Component {\r\n    state = {\r\n        numero: 0\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Contador</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// FORMA 1\r\n// class Contador extends Component {\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h2>Contador</h2>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Contador"]},"metadata":{},"sourceType":"module"}